-- @atlcompiler atl2006 
module INPUT2OUTPUT;

create OUT : TYPEDUCIF , constraint : CONSTRAINT  from IN : TYPEDUCIF;
helper  def : variablecounter : Integer =
	0;

helper  def : getVariableNumber : Integer =
	CONSTRAINT!Variable.allInstancesFrom('constraint').count() + 1;

helper  def : createFeature3(base : String, name : String, value : ECORE!EObject) : CONSTRAINT!Feature =
	thisModule.makeFeature('tempfeature').refSetValue('name',if (thisModule.typemap.getKeys().includes(base)) then thisModule.typeattributemap.get(base).get(name) else name endif).refSetValue('value',value.toString());

helper  def : typemap : Map(String,String) =
	Map{};

helper  def : typeattributemap : Map(String,Map(String,String)) =
	Map{};

helper  def : getContainer(object : ECORE!EObject, parent : String) : ECORE!EObject =
	if object.oclIsUndefined() then OclUndefined else if object.eClass().name = parent then object else thisModule.getContainer(object.eContainer(),parent) endif endif;

helper  def : SortGuard(invar : TYPEDUCIF!"Sort") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Sort") then 
true 
else
false
endif
;

helper  def : ExpressionSortGuard(invar : TYPEDUCIF!"ExpressionSort") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"ExpressionSort") then 
true 
else
false
endif
;

helper  def : StructureSortGuard(invar : TYPEDUCIF!"StructureSort") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"StructureSort") then 
true 
else
false
endif
;

helper  def : ConstructorGuard(invar : TYPEDUCIF!"Constructor") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Constructor") then 
true 
else
false
endif
;

helper  def : ProjectionGuard(invar : TYPEDUCIF!"Projection") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Projection") then 
true 
else
false
endif
;

helper  def : OpGuard(invar : TYPEDUCIF!"Op") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Op") then 
true 
else
false
endif
;

helper  def : EqnGuard(invar : TYPEDUCIF!"Eqn") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Eqn") then 
true 
else
false
endif
;

helper  def : AtomGuard(invar : TYPEDUCIF!"Atom") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Atom") then 
true 
else
false
endif
;

helper  def : TauGuard(invar : TYPEDUCIF!"Tau") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Tau") then 
true 
else
false
endif
;

helper  def : SynchronizationGuard(invar : TYPEDUCIF!"Synchronization") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Synchronization") then 
true 
else
false
endif
;

helper  def : TimedActionGuard(invar : TYPEDUCIF!"TimedAction") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"TimedAction") then 
true 
else
false
endif
;

helper  def : BoundedInitialisationGuard(invar : TYPEDUCIF!"BoundedInitialisation") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"BoundedInitialisation") then 
true 
else
false
endif
;

helper  def : LeftMergeGuard(invar : TYPEDUCIF!"LeftMerge") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"LeftMerge") then 
true 
else
false
endif
;

helper  def : BagEnumElementGuard(invar : TYPEDUCIF!"BagEnumElement") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"BagEnumElement") then 
true 
else
false
endif
;

helper  def : IdDeclGuard(invar : TYPEDUCIF!"IdDecl") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"IdDecl") then 
true 
else
false
endif
;

helper  def : WhereClauseGuard(invar : TYPEDUCIF!"WhereClause") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"WhereClause") then 
true 
else
false
endif
;

helper  def : ProcessGuard(invar : TYPEDUCIF!"Process") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Process") then 
true 
else
false
endif
;

helper  def : ProcessDeclGuard(invar : TYPEDUCIF!"ProcessDecl") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"ProcessDecl") then 
true 
else
false
endif
;

helper  def : ConstraintVarGuard(invar : TYPEDUCIF!"ConstraintVar") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"ConstraintVar") then 
true 
else
false
endif
;

helper  def : SpecificationGuard(invar : TYPEDUCIF!"Specification") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Specification") then 
true 
else
false
endif
;

helper  def : BoolGuard(invar : TYPEDUCIF!"Bool") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Bool") then 
true 
else
false
endif
;

helper  def : PosGuard(invar : TYPEDUCIF!"Pos") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Pos") then 
true 
else
false
endif
;

helper  def : NatGuard(invar : TYPEDUCIF!"Nat") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Nat") then 
true 
else
false
endif
;

helper  def : IntGuard(invar : TYPEDUCIF!"Int") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Int") then 
true 
else
false
endif
;

helper  def : RealGuard(invar : TYPEDUCIF!"Real") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Real") then 
true 
else
false
endif
;

helper  def : ListGuard(invar : TYPEDUCIF!"List") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"List") then 
true 
else
false
endif
;

helper  def : SetGuard(invar : TYPEDUCIF!"Set") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Set") then 
true 
else
false
endif
;

helper  def : BagGuard(invar : TYPEDUCIF!"Bag") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Bag") then 
true 
else
false
endif
;

helper  def : SortRefGuard(invar : TYPEDUCIF!"SortRef") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"SortRef") then 
true 
else
false
endif
;

helper  def : HigherOrderGuard(invar : TYPEDUCIF!"HigherOrder") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"HigherOrder") then 
true 
else
false
endif
;

helper  def : EquationGuard(invar : TYPEDUCIF!"Equation") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Equation") then 
true 
else
false
endif
;

helper  def : AtomicActionGuard(invar : TYPEDUCIF!"AtomicAction") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"AtomicAction") then 
true 
else
false
endif
;

helper  def : DeadlockGuard(invar : TYPEDUCIF!"Deadlock") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Deadlock") then 
true 
else
false
endif
;

helper  def : SummationGuard(invar : TYPEDUCIF!"Summation") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Summation") then 
true 
else
false
endif
;

helper  def : BlockGuard(invar : TYPEDUCIF!"Block") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Block") then 
true 
else
false
endif
;

helper  def : AllowGuard(invar : TYPEDUCIF!"Allow") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Allow") then 
true 
else
false
endif
;

helper  def : HideGuard(invar : TYPEDUCIF!"Hide") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Hide") then 
true 
else
false
endif
;

helper  def : RenameGuard(invar : TYPEDUCIF!"Rename") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Rename") then 
true 
else
false
endif
;

helper  def : RenamingGuard(invar : TYPEDUCIF!"Renaming") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Renaming") then 
true 
else
false
endif
;

helper  def : CommunicationGuard(invar : TYPEDUCIF!"Communication") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Communication") then 
true 
else
false
endif
;

helper  def : MultiActionGuard(invar : TYPEDUCIF!"MultiAction") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"MultiAction") then 
true 
else
false
endif
;

helper  def : SequenceGuard(invar : TYPEDUCIF!"Sequence") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Sequence") then 
true 
else
false
endif
;

helper  def : ImplicationGuard(invar : TYPEDUCIF!"Implication") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Implication") then 
true 
else
false
endif
;

helper  def : ParallelismGuard(invar : TYPEDUCIF!"Parallelism") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Parallelism") then 
true 
else
false
endif
;

helper  def : ChoiceGuard(invar : TYPEDUCIF!"Choice") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Choice") then 
true 
else
false
endif
;

helper  def : IdentifierGuard(invar : TYPEDUCIF!"Identifier") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Identifier") then 
true 
else
false
endif
;

helper  def : NumberGuard(invar : TYPEDUCIF!"Number") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Number") then 
true 
else
false
endif
;

helper  def : BooleanLiteralGuard(invar : TYPEDUCIF!"BooleanLiteral") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"BooleanLiteral") then 
true 
else
false
endif
;

helper  def : SetEnumerationGuard(invar : TYPEDUCIF!"SetEnumeration") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"SetEnumeration") then 
true 
else
false
endif
;

helper  def : ListEnumerationGuard(invar : TYPEDUCIF!"ListEnumeration") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"ListEnumeration") then 
true 
else
false
endif
;

helper  def : BagEnumerationGuard(invar : TYPEDUCIF!"BagEnumeration") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"BagEnumeration") then 
true 
else
false
endif
;

helper  def : FunctionApplicationGuard(invar : TYPEDUCIF!"FunctionApplication") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"FunctionApplication") then 
true 
else
false
endif
;

helper  def : MapAccessGuard(invar : TYPEDUCIF!"MapAccess") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"MapAccess") then 
true 
else
false
endif
;

helper  def : UnaryExpressionGuard(invar : TYPEDUCIF!"UnaryExpression") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"UnaryExpression") then 
true 
else
false
endif
;

helper  def : QuantificationGuard(invar : TYPEDUCIF!"Quantification") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Quantification") then 
true 
else
false
endif
;

helper  def : BinaryExpressionGuard(invar : TYPEDUCIF!"BinaryExpression") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"BinaryExpression") then 
true 
else
false
endif
;

helper  def : LambdaGuard(invar : TYPEDUCIF!"Lambda") : Boolean =
	if invar.oclIsTypeOf(TYPEDUCIF!"Lambda") then 
true 
else
false
endif
;


lazy rule makeNode {
	from invar : Ecore!EObject
	to literalvar : CONSTRAINT!"Literal" (
		value <- 'error'
	 )
do {
 }
 }

lazy rule makeLiteral {
	from invar : Ecore!EString
	to literalvar : CONSTRAINT!"Literal" (
		value <- if (invar.oclIsKindOf(TYPEDUCIF!EEnumLiteral)) then invar.name else invar.toString() endif
	 )
do {
 }
 }

lazy rule makeObjectNode {
	from invar : ECORE!EObject
	to objectvar : CONSTRAINT!"ObjectNode" (
		name <- invar.eClass().eContainer().name + '_' + invar.eClass().name,
		features <- invar.eClass().eAllAttributes->select(c | invar.eGet(c) <> OclUndefined)->collect(a | thisModule.createFeature(invar.eClass().name,a.name,thisModule.makeLiteral(invar.eGet(a))))
		          .union(
		          invar.eClass().eAllReferences->select(c | invar.eGet(c) <> OclUndefined and c.name <> 'links')->collect(a | thisModule.createFeature(
		          	                                                                                                  invar.eClass().name,
																													  a.name,
																													  if (a.upperBound = 1) then
																													      thisModule.makeObjectNode(invar.eGet(a))
																													  else
																													  	  thisModule.makeListNode(invar.eGet(a)->collect(v | thisModule.makeObjectNode(v)))
																													  endif
																													  )
																						            )
				  )
	 )
do {
 }
 }

rule createFeature (base : String, name : String, invalue : ECORE!EObject) {
	to featurevar : CONSTRAINT!"Feature" (
		name <- name,
		value <- invalue
	 )
do {
featurevar; }
 }

lazy rule makeListNode {
	from invar : Sequence(ECORE!EObject)
	to listvar : CONSTRAINT!"ListNode" (
		values <- invar
	 )
do {
 }
 }

rule SortRule {
	from invar : TYPEDUCIF!"Sort" (thisModule.SortGuard(invar))
	to Sortvar : TYPEDUCIF!"Sort" (
		name <- invar.name
	 )
do {
 }
 }

rule ExpressionSortRule {
	from invar : TYPEDUCIF!"ExpressionSort" (thisModule.ExpressionSortGuard(invar))
	to ExpressionSortvar : TYPEDUCIF!"ExpressionSort" (
		name <- invar.name,
		expression <- invar.expression
	 )
do {
 }
 }

rule StructureSortRule {
	from invar : TYPEDUCIF!"StructureSort" (thisModule.StructureSortGuard(invar))
	to StructureSortvar : TYPEDUCIF!"StructureSort" (
		name <- invar.name,
		constructors <- invar.constructors
	 )
do {
 }
 }

rule ConstructorRule {
	from invar : TYPEDUCIF!"Constructor" (thisModule.ConstructorGuard(invar))
	to Constructorvar : TYPEDUCIF!"Constructor" (
		name <- invar.name,
		discriminator <- invar.discriminator,
		projections <- invar.projections
	 )
do {
 }
 }

rule ProjectionRule {
	from invar : TYPEDUCIF!"Projection" (thisModule.ProjectionGuard(invar))
	to Projectionvar : TYPEDUCIF!"Projection" (
		name <- invar.name,
		domain <- invar.domain
	 )
do {
 }
 }

rule OpRule {
	from invar : TYPEDUCIF!"Op" (thisModule.OpGuard(invar))
	to Opvar : TYPEDUCIF!"Op" (
		cons <- invar.cons,
		ops <- invar.ops
	 )
do {
 }
 }

rule EqnRule {
	from invar : TYPEDUCIF!"Eqn" (thisModule.EqnGuard(invar))
	to Eqnvar : TYPEDUCIF!"Eqn" (
		variables <- invar.variables,
		equations <- invar.equations
	 )
do {
 }
 }

rule AtomRule {
	from invar : TYPEDUCIF!"Atom" (thisModule.AtomGuard(invar))
	to Atomvar : TYPEDUCIF!"Atom" (
		name <- invar.name,
		type <- invar.type
	 )
do {
 }
 }

rule TauRule {
	from invar : TYPEDUCIF!"Tau" (thisModule.TauGuard(invar))
	to Tauvar : TYPEDUCIF!"Tau" (
		constraintvar <- invar.constraintvar
	 )
do {
 }
 }

rule SynchronizationRule {
	from invar : TYPEDUCIF!"Synchronization" (thisModule.SynchronizationGuard(invar))
	to Synchronizationvar : TYPEDUCIF!"Synchronization" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 )
do {
 }
 }

rule TimedActionRule {
	from invar : TYPEDUCIF!"TimedAction" (thisModule.TimedActionGuard(invar))
	to TimedActionvar : TYPEDUCIF!"TimedAction" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 )
do {
 }
 }

rule BoundedInitialisationRule {
	from invar : TYPEDUCIF!"BoundedInitialisation" (thisModule.BoundedInitialisationGuard(invar))
	to BoundedInitialisationvar : TYPEDUCIF!"BoundedInitialisation" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 )
do {
 }
 }

rule LeftMergeRule {
	from invar : TYPEDUCIF!"LeftMerge" (thisModule.LeftMergeGuard(invar))
	to LeftMergevar : TYPEDUCIF!"LeftMerge" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 )
do {
 }
 }

rule BagEnumElementRule {
	from invar : TYPEDUCIF!"BagEnumElement" (thisModule.BagEnumElementGuard(invar))
	to BagEnumElementvar : TYPEDUCIF!"BagEnumElement" (
		element <- invar.element,
		quantity <- invar.quantity
	 )
do {
 }
 }

rule IdDeclRule {
	from invar : TYPEDUCIF!"IdDecl" (thisModule.IdDeclGuard(invar))
	to IdDeclvar : TYPEDUCIF!"IdDecl" (
		name <- invar.name,
		sort <- invar.sort
	 )
do {
 }
 }

rule WhereClauseRule {
	from invar : TYPEDUCIF!"WhereClause" (thisModule.WhereClauseGuard(invar))
	to WhereClausevar : TYPEDUCIF!"WhereClause" (
		constraintvar <- invar.constraintvar,
		base <- invar.base,
		values <- invar.values
	 )
do {
 }
 }

rule ProcessRule {
	from invar : TYPEDUCIF!"Process" (thisModule.ProcessGuard(invar))
	to Processvar : TYPEDUCIF!"Process" (
		name <- invar.name,
		parameters <- invar.parameters
	 )
do {
 }
 }

rule ProcessDeclRule {
	from invar : TYPEDUCIF!"ProcessDecl" (thisModule.ProcessDeclGuard(invar))
	to ProcessDeclvar : TYPEDUCIF!"ProcessDecl" (
		action <- invar.action,
		process <- invar.process
	 )
do {
 }
 }

rule ConstraintVarRule {
	from invar : TYPEDUCIF!"ConstraintVar" (thisModule.ConstraintVarGuard(invar))
	to ConstraintVarvar : TYPEDUCIF!"ConstraintVar" (
		number <- invar.number
	 )
do {
 }
 }

rule SpecificationRule {
	from invar : TYPEDUCIF!"Specification" (thisModule.SpecificationGuard(invar))
	to Specificationvar : TYPEDUCIF!"Specification" (
		name <- invar.name,
		atoms <- invar.atoms,
		processes <- invar.processes,
		sorts <- invar.sorts,
		operations <- invar.operations,
		equations <- invar.equations,
		init <- invar.init
	 ),
	program : CONSTRAINT!"Program" (
		constraints <- CONSTRAINT!Constraint.allInstances(),
		operators <- OrderedSet{widen1PosNat,widen2NatInt,widen3IntReal,widen4PosSortNatSort,widen5NatSortIntSort,widen6IntSortRealSort,widen7ListSortListSort,widen8SetSortSetSort,widen9BagSortBagSort,strategy1PosNat,strategy2NatInt,strategy3IntReal,strategy4PosSortNatSort,strategy5NatSortIntSort,strategy6IntSortRealSort,strategy7ListSortListSort,strategy8SetSortSetSort,strategy9BagSortBagSort},
		variables <- CONSTRAINT!Variable.allInstances(),
		types <- OrderedSet{classtextualmcrl2Specification,classtextualmcrl2Sort,classtextualmcrl2ExpressionSort,classtextualmcrl2StructureSort,classtextualmcrl2SortExpr,classtextualmcrl2Bool,classtextualmcrl2Pos,classtextualmcrl2Nat,classtextualmcrl2Int,classtextualmcrl2Real,classtextualmcrl2List,classtextualmcrl2Set,classtextualmcrl2Bag,classtextualmcrl2SortRef,classtextualmcrl2HigherOrder,classtextualmcrl2Constructor,classtextualmcrl2Projection,classtextualmcrl2Op,classtextualmcrl2Eqn,classtextualmcrl2Equation,classtextualmcrl2Atom,classtextualmcrl2ProcessExpr,classtextualmcrl2AtomicAction,classtextualmcrl2Deadlock,classtextualmcrl2Tau,classtextualmcrl2Summation,classtextualmcrl2Block,classtextualmcrl2Allow,classtextualmcrl2Hide,classtextualmcrl2Rename,classtextualmcrl2Renaming,classtextualmcrl2Communication,classtextualmcrl2MultiAction,classtextualmcrl2CompositeAction,classtextualmcrl2Synchronization,classtextualmcrl2TimedAction,classtextualmcrl2Sequence,classtextualmcrl2Implication,classtextualmcrl2BoundedInitialisation,classtextualmcrl2Parallelism,classtextualmcrl2LeftMerge,classtextualmcrl2Choice,classtextualmcrl2Nameable,classtextualmcrl2DataExpression,classtextualmcrl2Identifier,classtextualmcrl2Number,classtextualmcrl2BooleanLiteral,classtextualmcrl2Collection,classtextualmcrl2SetEnumeration,classtextualmcrl2ListEnumeration,classtextualmcrl2BagEnumeration,classtextualmcrl2BagEnumElement,classtextualmcrl2FunctionApplication,classtextualmcrl2MapAccess,classtextualmcrl2UnaryExpression,classtextualmcrl2Quantification,classtextualmcrl2IdDecl,classtextualmcrl2BinaryExpression,classtextualmcrl2Lambda,classtextualmcrl2WhereClause,classtextualmcrl2Process,classtextualmcrl2ProcessDecl,classtextualmcrl2ConstraintElement,classtextualmcrl2ConstraintVar,classmcrl2Specification,classmcrl2Sort,classmcrl2ExpressionSort,classmcrl2StructureSort,classmcrl2BoolSort,classmcrl2PosSort,classmcrl2NatSort,classmcrl2IntSort,classmcrl2RealSort,classmcrl2ListSort,classmcrl2SetSort,classmcrl2BagSort,classmcrl2HigherOrderSort,classmcrl2SortExpr,classmcrl2Bool,classmcrl2Pos,classmcrl2Nat,classmcrl2Int,classmcrl2Real,classmcrl2List,classmcrl2Set,classmcrl2Bag,classmcrl2SortRef,classmcrl2HigherOrder,classmcrl2Constructor,classmcrl2Projection,classmcrl2Op,classmcrl2Eqn,classmcrl2Equation,classmcrl2Atom,classmcrl2ProcessExpr,classmcrl2AtomicAction,classmcrl2Deadlock,classmcrl2Tau,classmcrl2Instance,classmcrl2Summation,classmcrl2Block,classmcrl2Allow,classmcrl2Hide,classmcrl2Rename,classmcrl2Renaming,classmcrl2Communication,classmcrl2MultiAction,classmcrl2CompositeAction,classmcrl2Synchronization,classmcrl2TimedAction,classmcrl2Sequence,classmcrl2Implication,classmcrl2BoundedInitialisation,classmcrl2Parallelism,classmcrl2LeftMerge,classmcrl2Choice,classmcrl2Nameable,classmcrl2DataExpression,classmcrl2Identifier,classmcrl2ConstructorReference,classmcrl2Number,classmcrl2BooleanLiteral,classmcrl2Collection,classmcrl2SetEnumeration,classmcrl2ListEnumeration,classmcrl2BagEnumeration,classmcrl2BagEnumElement,classmcrl2FunctionApplication,classmcrl2MapAccess,classmcrl2UnaryExpression,classmcrl2Quantification,classmcrl2IdDecl,classmcrl2BinaryExpression,classmcrl2Lambda,classmcrl2WhereClause,classmcrl2Process,classmcrl2ProcessDecl},
		typeAttribute <- Sequence {10},
		objectElements <- OrderedSet {'sort', 'atom', 'process', 'atoms', 'old', 'new', 'actions', 'result', 'type', 'variable', 'constructor'}
	 ),
	classtextualmcrl2Specification : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Specification',
		parameters <- OrderedSet{'atoms','processes','sorts','operations','equations','init','name'}
	 ),
	classtextualmcrl2Sort : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Sort',
		parameters <- OrderedSet{'p1:textualmcrl2_Nameable'}
	 ),
	classtextualmcrl2ExpressionSort : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ExpressionSort',
		parameters <- OrderedSet{'expression','p1:textualmcrl2_Sort'}
	 ),
	classtextualmcrl2StructureSort : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_StructureSort',
		parameters <- OrderedSet{'constructors','p1:textualmcrl2_Sort'}
	 ),
	classtextualmcrl2SortExpr : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_SortExpr',
		parameters <- OrderedSet{'p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2Bool : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Bool',
		parameters <- OrderedSet{'p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Pos : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Pos',
		parameters <- OrderedSet{'p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Nat : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Nat',
		parameters <- OrderedSet{'p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Int : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Int',
		parameters <- OrderedSet{'p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Real : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Real',
		parameters <- OrderedSet{'p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2List : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_List',
		parameters <- OrderedSet{'elementSort','p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Set : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Set',
		parameters <- OrderedSet{'elementSort','p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Bag : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Bag',
		parameters <- OrderedSet{'elementSort','p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2SortRef : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_SortRef',
		parameters <- OrderedSet{'sortname','links','sort','p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2HigherOrder : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_HigherOrder',
		parameters <- OrderedSet{'domain','result','p1:textualmcrl2_SortExpr'}
	 ),
	classtextualmcrl2Constructor : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Constructor',
		parameters <- OrderedSet{'projections','discriminator','p1:textualmcrl2_Nameable'}
	 ),
	classtextualmcrl2Projection : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Projection',
		parameters <- OrderedSet{'domain','p1:textualmcrl2_Nameable'}
	 ),
	classtextualmcrl2Op : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Op',
		parameters <- OrderedSet{'ops','cons'}
	 ),
	classtextualmcrl2Eqn : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Eqn',
		parameters <- OrderedSet{'variables','equations'}
	 ),
	classtextualmcrl2Equation : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Equation',
		parameters <- OrderedSet{'condition','left','right','p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2Atom : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Atom',
		parameters <- OrderedSet{'type','p1:textualmcrl2_Nameable'}
	 ),
	classtextualmcrl2ProcessExpr : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ProcessExpr',
		parameters <- OrderedSet{'p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2AtomicAction : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_AtomicAction',
		parameters <- OrderedSet{'atomname','links','arguments','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Deadlock : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Deadlock',
		parameters <- OrderedSet{'p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Tau : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Tau',
		parameters <- OrderedSet{'p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Summation : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Summation',
		parameters <- OrderedSet{'parameters','child','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Block : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Block',
		parameters <- OrderedSet{'child','atomnames','links','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Allow : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Allow',
		parameters <- OrderedSet{'child','atomnames','links','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Hide : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Hide',
		parameters <- OrderedSet{'child','atomnames','links','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Rename : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Rename',
		parameters <- OrderedSet{'child','renamings','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Renaming : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Renaming',
		parameters <- OrderedSet{'oldname','newname','links','p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2Communication : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Communication',
		parameters <- OrderedSet{'communications','action','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2MultiAction : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_MultiAction',
		parameters <- OrderedSet{'actionnames','resultname','links','p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2CompositeAction : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_CompositeAction',
		parameters <- OrderedSet{'left','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2Synchronization : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Synchronization',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2TimedAction : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_TimedAction',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2Sequence : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Sequence',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2Implication : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Implication',
		parameters <- OrderedSet{'condition','action','elseAction','p1:textualmcrl2_ProcessExpr'}
	 ),
	classtextualmcrl2BoundedInitialisation : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_BoundedInitialisation',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2Parallelism : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Parallelism',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2LeftMerge : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_LeftMerge',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2Choice : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Choice',
		parameters <- OrderedSet{'right','p1:textualmcrl2_CompositeAction'}
	 ),
	classtextualmcrl2Nameable : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Nameable',
		parameters <- OrderedSet{'name'}
	 ),
	classtextualmcrl2DataExpression : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_DataExpression',
		parameters <- OrderedSet{'p1:textualmcrl2_ConstraintElement'}
	 ),
	classtextualmcrl2Identifier : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Identifier',
		parameters <- OrderedSet{'varname','links','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2Number : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Number',
		parameters <- OrderedSet{'value','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2BooleanLiteral : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_BooleanLiteral',
		parameters <- OrderedSet{'value','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2Collection : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Collection',
		parameters <- OrderedSet{'p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2SetEnumeration : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_SetEnumeration',
		parameters <- OrderedSet{'elements','p1:textualmcrl2_Collection'}
	 ),
	classtextualmcrl2ListEnumeration : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ListEnumeration',
		parameters <- OrderedSet{'elements','p1:textualmcrl2_Collection'}
	 ),
	classtextualmcrl2BagEnumeration : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_BagEnumeration',
		parameters <- OrderedSet{'elements','p1:textualmcrl2_Collection'}
	 ),
	classtextualmcrl2BagEnumElement : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_BagEnumElement',
		parameters <- OrderedSet{'element','quantity'}
	 ),
	classtextualmcrl2FunctionApplication : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_FunctionApplication',
		parameters <- OrderedSet{'base','arguments','links','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2MapAccess : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_MapAccess',
		parameters <- OrderedSet{'base','key','value','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2UnaryExpression : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_UnaryExpression',
		parameters <- OrderedSet{'right','operation','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2Quantification : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Quantification',
		parameters <- OrderedSet{'expression','variable','forall','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2IdDecl : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_IdDecl',
		parameters <- OrderedSet{'sort','name'}
	 ),
	classtextualmcrl2BinaryExpression : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_BinaryExpression',
		parameters <- OrderedSet{'operator','left','right','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2Lambda : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Lambda',
		parameters <- OrderedSet{'expression','variable','links','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2WhereClause : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_WhereClause',
		parameters <- OrderedSet{'base','values','p1:textualmcrl2_DataExpression'}
	 ),
	classtextualmcrl2Process : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_Process',
		parameters <- OrderedSet{'parameters','p1:textualmcrl2_Nameable'}
	 ),
	classtextualmcrl2ProcessDecl : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ProcessDecl',
		parameters <- OrderedSet{'action','process'}
	 ),
	classtextualmcrl2ConstraintElement : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ConstraintElement',
		parameters <- OrderedSet{'constraintvar'}
	 ),
	classtextualmcrl2ConstraintVar : CONSTRAINT!"Type" (
		name <- 'textualmcrl2_ConstraintVar',
		parameters <- OrderedSet{'number'}
	 ),
	classmcrl2Specification : CONSTRAINT!"Type" (
		name <- 'mcrl2_Specification',
		parameters <- OrderedSet{'atoms','processes','sorts','operations','equations','init'}
	 ),
	classmcrl2Sort : CONSTRAINT!"Type" (
		name <- 'mcrl2_Sort',
		parameters <- OrderedSet{'p1:mcrl2_Nameable'}
	 ),
	classmcrl2ExpressionSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_ExpressionSort',
		parameters <- OrderedSet{'expression','p1:mcrl2_Sort'}
	 ),
	classmcrl2StructureSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_StructureSort',
		parameters <- OrderedSet{'constructors','p1:mcrl2_Sort'}
	 ),
	classmcrl2BoolSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_BoolSort',
		parameters <- OrderedSet{'p1:mcrl2_Sort'}
	 ),
	classmcrl2PosSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_PosSort',
		parameters <- OrderedSet{'p1:mcrl2_Sort'}
	 ),
	classmcrl2NatSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_NatSort',
		parameters <- OrderedSet{'p1:mcrl2_Sort'}
	 ),
	classmcrl2IntSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_IntSort',
		parameters <- OrderedSet{'p1:mcrl2_Sort'}
	 ),
	classmcrl2RealSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_RealSort',
		parameters <- OrderedSet{'p1:mcrl2_Sort'}
	 ),
	classmcrl2ListSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_ListSort',
		parameters <- OrderedSet{'elementSort','p1:mcrl2_Sort'}
	 ),
	classmcrl2SetSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_SetSort',
		parameters <- OrderedSet{'elementSort','p1:mcrl2_Sort'}
	 ),
	classmcrl2BagSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_BagSort',
		parameters <- OrderedSet{'elementSort','p1:mcrl2_Sort'}
	 ),
	classmcrl2HigherOrderSort : CONSTRAINT!"Type" (
		name <- 'mcrl2_HigherOrderSort',
		parameters <- OrderedSet{'domain','result','p1:mcrl2_Sort'}
	 ),
	classmcrl2SortExpr : CONSTRAINT!"Type" (
		name <- 'mcrl2_SortExpr',
		parameters <- OrderedSet{'sortExpr'}
	 ),
	classmcrl2Bool : CONSTRAINT!"Type" (
		name <- 'mcrl2_Bool',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Pos : CONSTRAINT!"Type" (
		name <- 'mcrl2_Pos',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Nat : CONSTRAINT!"Type" (
		name <- 'mcrl2_Nat',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Int : CONSTRAINT!"Type" (
		name <- 'mcrl2_Int',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Real : CONSTRAINT!"Type" (
		name <- 'mcrl2_Real',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2List : CONSTRAINT!"Type" (
		name <- 'mcrl2_List',
		parameters <- OrderedSet{'elementSort','sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Set : CONSTRAINT!"Type" (
		name <- 'mcrl2_Set',
		parameters <- OrderedSet{'elementSort','sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Bag : CONSTRAINT!"Type" (
		name <- 'mcrl2_Bag',
		parameters <- OrderedSet{'elementSort','sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2SortRef : CONSTRAINT!"Type" (
		name <- 'mcrl2_SortRef',
		parameters <- OrderedSet{'sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2HigherOrder : CONSTRAINT!"Type" (
		name <- 'mcrl2_HigherOrder',
		parameters <- OrderedSet{'domain','result','sort','p1:mcrl2_SortExpr'}
	 ),
	classmcrl2Constructor : CONSTRAINT!"Type" (
		name <- 'mcrl2_Constructor',
		parameters <- OrderedSet{'projections','discriminator','p1:mcrl2_Nameable'}
	 ),
	classmcrl2Projection : CONSTRAINT!"Type" (
		name <- 'mcrl2_Projection',
		parameters <- OrderedSet{'domain','p1:mcrl2_Nameable'}
	 ),
	classmcrl2Op : CONSTRAINT!"Type" (
		name <- 'mcrl2_Op',
		parameters <- OrderedSet{'ops','cons'}
	 ),
	classmcrl2Eqn : CONSTRAINT!"Type" (
		name <- 'mcrl2_Eqn',
		parameters <- OrderedSet{'variables','equations'}
	 ),
	classmcrl2Equation : CONSTRAINT!"Type" (
		name <- 'mcrl2_Equation',
		parameters <- OrderedSet{'condition','left','right'}
	 ),
	classmcrl2Atom : CONSTRAINT!"Type" (
		name <- 'mcrl2_Atom',
		parameters <- OrderedSet{'type','p1:mcrl2_Nameable'}
	 ),
	classmcrl2ProcessExpr : CONSTRAINT!"Type" (
		name <- 'mcrl2_ProcessExpr'
	 ),
	classmcrl2AtomicAction : CONSTRAINT!"Type" (
		name <- 'mcrl2_AtomicAction',
		parameters <- OrderedSet{'atom','arguments','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Deadlock : CONSTRAINT!"Type" (
		name <- 'mcrl2_Deadlock',
		parameters <- OrderedSet{'p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Tau : CONSTRAINT!"Type" (
		name <- 'mcrl2_Tau',
		parameters <- OrderedSet{'p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Instance : CONSTRAINT!"Type" (
		name <- 'mcrl2_Instance',
		parameters <- OrderedSet{'process','arguments','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Summation : CONSTRAINT!"Type" (
		name <- 'mcrl2_Summation',
		parameters <- OrderedSet{'parameters','child','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Block : CONSTRAINT!"Type" (
		name <- 'mcrl2_Block',
		parameters <- OrderedSet{'child','atoms','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Allow : CONSTRAINT!"Type" (
		name <- 'mcrl2_Allow',
		parameters <- OrderedSet{'child','atoms','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Hide : CONSTRAINT!"Type" (
		name <- 'mcrl2_Hide',
		parameters <- OrderedSet{'child','atoms','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Rename : CONSTRAINT!"Type" (
		name <- 'mcrl2_Rename',
		parameters <- OrderedSet{'child','renamings','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Renaming : CONSTRAINT!"Type" (
		name <- 'mcrl2_Renaming',
		parameters <- OrderedSet{'old','new'}
	 ),
	classmcrl2Communication : CONSTRAINT!"Type" (
		name <- 'mcrl2_Communication',
		parameters <- OrderedSet{'communications','action','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2MultiAction : CONSTRAINT!"Type" (
		name <- 'mcrl2_MultiAction',
		parameters <- OrderedSet{'actions','result'}
	 ),
	classmcrl2CompositeAction : CONSTRAINT!"Type" (
		name <- 'mcrl2_CompositeAction',
		parameters <- OrderedSet{'left','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2Synchronization : CONSTRAINT!"Type" (
		name <- 'mcrl2_Synchronization',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2TimedAction : CONSTRAINT!"Type" (
		name <- 'mcrl2_TimedAction',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2Sequence : CONSTRAINT!"Type" (
		name <- 'mcrl2_Sequence',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2Implication : CONSTRAINT!"Type" (
		name <- 'mcrl2_Implication',
		parameters <- OrderedSet{'condition','action','elseAction','p1:mcrl2_ProcessExpr'}
	 ),
	classmcrl2BoundedInitialisation : CONSTRAINT!"Type" (
		name <- 'mcrl2_BoundedInitialisation',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2Parallelism : CONSTRAINT!"Type" (
		name <- 'mcrl2_Parallelism',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2LeftMerge : CONSTRAINT!"Type" (
		name <- 'mcrl2_LeftMerge',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2Choice : CONSTRAINT!"Type" (
		name <- 'mcrl2_Choice',
		parameters <- OrderedSet{'right','p1:mcrl2_CompositeAction'}
	 ),
	classmcrl2Nameable : CONSTRAINT!"Type" (
		name <- 'mcrl2_Nameable',
		parameters <- OrderedSet{'name'}
	 ),
	classmcrl2DataExpression : CONSTRAINT!"Type" (
		name <- 'mcrl2_DataExpression',
		parameters <- OrderedSet{'type'}
	 ),
	classmcrl2Identifier : CONSTRAINT!"Type" (
		name <- 'mcrl2_Identifier',
		parameters <- OrderedSet{'variable','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2ConstructorReference : CONSTRAINT!"Type" (
		name <- 'mcrl2_ConstructorReference',
		parameters <- OrderedSet{'arguments','constructor','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2Number : CONSTRAINT!"Type" (
		name <- 'mcrl2_Number',
		parameters <- OrderedSet{'value','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2BooleanLiteral : CONSTRAINT!"Type" (
		name <- 'mcrl2_BooleanLiteral',
		parameters <- OrderedSet{'value','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2Collection : CONSTRAINT!"Type" (
		name <- 'mcrl2_Collection',
		parameters <- OrderedSet{'p1:mcrl2_DataExpression'}
	 ),
	classmcrl2SetEnumeration : CONSTRAINT!"Type" (
		name <- 'mcrl2_SetEnumeration',
		parameters <- OrderedSet{'elements','p1:mcrl2_Collection'}
	 ),
	classmcrl2ListEnumeration : CONSTRAINT!"Type" (
		name <- 'mcrl2_ListEnumeration',
		parameters <- OrderedSet{'elements','p1:mcrl2_Collection'}
	 ),
	classmcrl2BagEnumeration : CONSTRAINT!"Type" (
		name <- 'mcrl2_BagEnumeration',
		parameters <- OrderedSet{'elements','p1:mcrl2_Collection'}
	 ),
	classmcrl2BagEnumElement : CONSTRAINT!"Type" (
		name <- 'mcrl2_BagEnumElement',
		parameters <- OrderedSet{'element','quantity'}
	 ),
	classmcrl2FunctionApplication : CONSTRAINT!"Type" (
		name <- 'mcrl2_FunctionApplication',
		parameters <- OrderedSet{'base','arguments','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2MapAccess : CONSTRAINT!"Type" (
		name <- 'mcrl2_MapAccess',
		parameters <- OrderedSet{'base','key','value','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2UnaryExpression : CONSTRAINT!"Type" (
		name <- 'mcrl2_UnaryExpression',
		parameters <- OrderedSet{'right','operation','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2Quantification : CONSTRAINT!"Type" (
		name <- 'mcrl2_Quantification',
		parameters <- OrderedSet{'expression','variable','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2IdDecl : CONSTRAINT!"Type" (
		name <- 'mcrl2_IdDecl',
		parameters <- OrderedSet{'sort','name'}
	 ),
	classmcrl2BinaryExpression : CONSTRAINT!"Type" (
		name <- 'mcrl2_BinaryExpression',
		parameters <- OrderedSet{'operator','left','right','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2Lambda : CONSTRAINT!"Type" (
		name <- 'mcrl2_Lambda',
		parameters <- OrderedSet{'expression','variable','p1:mcrl2_DataExpression'}
	 ),
	classmcrl2WhereClause : CONSTRAINT!"Type" (
		name <- 'mcrl2_WhereClause',
		parameters <- OrderedSet{'p1:mcrl2_DataExpression'}
	 ),
	classmcrl2Process : CONSTRAINT!"Type" (
		name <- 'mcrl2_Process',
		parameters <- OrderedSet{'parameters','p1:mcrl2_Nameable'}
	 ),
	classmcrl2ProcessDecl : CONSTRAINT!"Type" (
		name <- 'mcrl2_ProcessDecl',
		parameters <- OrderedSet{'action','process'}
	 ),
	widen1PosNat : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen1leftvarPos,
		rhs <- widen1rightvarNat,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen1leftvarPos : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Pos',
		features <- OrderedSet{}
	 ),
	widen1rightvarNat : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Nat',
		features <- OrderedSet{}
	 ),
	widen2NatInt : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen2leftvarNat,
		rhs <- widen2rightvarInt,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen2leftvarNat : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Nat',
		features <- OrderedSet{}
	 ),
	widen2rightvarInt : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{}
	 ),
	widen3IntReal : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen3leftvarInt,
		rhs <- widen3rightvarReal,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen3leftvarInt : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{}
	 ),
	widen3rightvarReal : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Real',
		features <- OrderedSet{}
	 ),
	widen4PosSortNatSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen4leftvarPosSort,
		rhs <- widen4rightvarNatSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen4leftvarPosSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_PosSort',
		features <- OrderedSet{}
	 ),
	widen4rightvarNatSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	widen5NatSortIntSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen5leftvarNatSort,
		rhs <- widen5rightvarIntSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen5leftvarNatSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	widen5rightvarIntSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	widen6IntSortRealSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen6leftvarIntSort,
		rhs <- widen6rightvarRealSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	widen6leftvarIntSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	widen6rightvarRealSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	widen7ListSortListSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen7leftvarListSort,
		rhs <- widen7rightvarListSort,
		variables <- OrderedSet{widen7variableel,widen7variableer},
		constraints <- OrderedSet{widen7constraint1}
	 ),
	widen7leftvarListSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{widen7leftvarelementSort}
	 ),
	widen7leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen7leftvarelementSortvar
	 ),
	widen7leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen7variableel
	 ),
	widen7rightvarListSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{widen7rightvarelementSort}
	 ),
	widen7rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen7rightvarelementSortvar
	 ),
	widen7rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen7variableer
	 ),
	widen7variableel : CONSTRAINT!"Variable" (
		number <- 3
	 ),
	widen7variableer : CONSTRAINT!"Variable" (
		number <- 4
	 ),
	widen7constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- widen7constraint1comparisonvar
	 ),
	widen7constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- widen7constraint1lhs,
		right <- widen7constraint1rhs,
		operation <- #LessEqual
	 ),
	widen7constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- widen7variableel
	 ),
	widen7constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- widen7variableer
	 ),
	widen8SetSortSetSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen8leftvarSetSort,
		rhs <- widen8rightvarSetSort,
		variables <- OrderedSet{widen8variableel,widen8variableer},
		constraints <- OrderedSet{widen8constraint1}
	 ),
	widen8leftvarSetSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{widen8leftvarelementSort}
	 ),
	widen8leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen8leftvarelementSortvar
	 ),
	widen8leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen8variableel
	 ),
	widen8rightvarSetSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{widen8rightvarelementSort}
	 ),
	widen8rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen8rightvarelementSortvar
	 ),
	widen8rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen8variableer
	 ),
	widen8variableel : CONSTRAINT!"Variable" (
		number <- 7
	 ),
	widen8variableer : CONSTRAINT!"Variable" (
		number <- 8
	 ),
	widen8constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- widen8constraint1comparisonvar
	 ),
	widen8constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- widen8constraint1lhs,
		right <- widen8constraint1rhs,
		operation <- #LessEqual
	 ),
	widen8constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- widen8variableel
	 ),
	widen8constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- widen8variableer
	 ),
	widen9BagSortBagSort : CONSTRAINT!"Operator" (
		name <- 'widenbasic',
		lhs <- widen9leftvarBagSort,
		rhs <- widen9rightvarBagSort,
		variables <- OrderedSet{widen9variableel,widen9variableer},
		constraints <- OrderedSet{widen9constraint1}
	 ),
	widen9leftvarBagSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{widen9leftvarelementSort}
	 ),
	widen9leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen9leftvarelementSortvar
	 ),
	widen9leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen9variableel
	 ),
	widen9rightvarBagSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{widen9rightvarelementSort}
	 ),
	widen9rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- widen9rightvarelementSortvar
	 ),
	widen9rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- widen9variableer
	 ),
	widen9variableel : CONSTRAINT!"Variable" (
		number <- 11
	 ),
	widen9variableer : CONSTRAINT!"Variable" (
		number <- 12
	 ),
	widen9constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- widen9constraint1comparisonvar
	 ),
	widen9constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- widen9constraint1lhs,
		right <- widen9constraint1rhs,
		operation <- #LessEqual
	 ),
	widen9constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- widen9variableel
	 ),
	widen9constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- widen9variableer
	 ),
	strategy1PosNat : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy1leftvarPos,
		rhs <- strategy1rightvarNat,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy1leftvarPos : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Pos',
		features <- OrderedSet{}
	 ),
	strategy1rightvarNat : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Nat',
		features <- OrderedSet{}
	 ),
	strategy2NatInt : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy2leftvarNat,
		rhs <- strategy2rightvarInt,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy2leftvarNat : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Nat',
		features <- OrderedSet{}
	 ),
	strategy2rightvarInt : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{}
	 ),
	strategy3IntReal : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy3leftvarInt,
		rhs <- strategy3rightvarReal,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy3leftvarInt : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{}
	 ),
	strategy3rightvarReal : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Real',
		features <- OrderedSet{}
	 ),
	strategy4PosSortNatSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy4leftvarPosSort,
		rhs <- strategy4rightvarNatSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy4leftvarPosSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_PosSort',
		features <- OrderedSet{}
	 ),
	strategy4rightvarNatSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	strategy5NatSortIntSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy5leftvarNatSort,
		rhs <- strategy5rightvarIntSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy5leftvarNatSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	strategy5rightvarIntSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	strategy6IntSortRealSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy6leftvarIntSort,
		rhs <- strategy6rightvarRealSort,
		variables <- OrderedSet{},
		constraints <- OrderedSet{}
	 ),
	strategy6leftvarIntSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	strategy6rightvarRealSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	strategy7ListSortListSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy7leftvarListSort,
		rhs <- strategy7rightvarListSort,
		variables <- OrderedSet{strategy7variableel,strategy7variableer},
		constraints <- OrderedSet{strategy7constraint1}
	 ),
	strategy7leftvarListSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{strategy7leftvarelementSort}
	 ),
	strategy7leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy7leftvarelementSortvar
	 ),
	strategy7leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy7variableel
	 ),
	strategy7rightvarListSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{strategy7rightvarelementSort}
	 ),
	strategy7rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy7rightvarelementSortvar
	 ),
	strategy7rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy7variableer
	 ),
	strategy7variableel : CONSTRAINT!"Variable" (
		number <- 15
	 ),
	strategy7variableer : CONSTRAINT!"Variable" (
		number <- 16
	 ),
	strategy7constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- strategy7constraint1comparisonvar
	 ),
	strategy7constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- strategy7constraint1lhs,
		right <- strategy7constraint1rhs,
		operation <- #LessEqual
	 ),
	strategy7constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- strategy7variableel
	 ),
	strategy7constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- strategy7variableer
	 ),
	strategy8SetSortSetSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy8leftvarSetSort,
		rhs <- strategy8rightvarSetSort,
		variables <- OrderedSet{strategy8variableel,strategy8variableer},
		constraints <- OrderedSet{strategy8constraint1}
	 ),
	strategy8leftvarSetSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{strategy8leftvarelementSort}
	 ),
	strategy8leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy8leftvarelementSortvar
	 ),
	strategy8leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy8variableel
	 ),
	strategy8rightvarSetSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{strategy8rightvarelementSort}
	 ),
	strategy8rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy8rightvarelementSortvar
	 ),
	strategy8rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy8variableer
	 ),
	strategy8variableel : CONSTRAINT!"Variable" (
		number <- 19
	 ),
	strategy8variableer : CONSTRAINT!"Variable" (
		number <- 20
	 ),
	strategy8constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- strategy8constraint1comparisonvar
	 ),
	strategy8constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- strategy8constraint1lhs,
		right <- strategy8constraint1rhs,
		operation <- #LessEqual
	 ),
	strategy8constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- strategy8variableel
	 ),
	strategy8constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- strategy8variableer
	 ),
	strategy9BagSortBagSort : CONSTRAINT!"Operator" (
		name <- 'strategybasic',
		lhs <- strategy9leftvarBagSort,
		rhs <- strategy9rightvarBagSort,
		variables <- OrderedSet{strategy9variableel,strategy9variableer},
		constraints <- OrderedSet{strategy9constraint1}
	 ),
	strategy9leftvarBagSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{strategy9leftvarelementSort}
	 ),
	strategy9leftvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy9leftvarelementSortvar
	 ),
	strategy9leftvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy9variableel
	 ),
	strategy9rightvarBagSort : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{strategy9rightvarelementSort}
	 ),
	strategy9rightvarelementSort : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- strategy9rightvarelementSortvar
	 ),
	strategy9rightvarelementSortvar : CONSTRAINT!"VariableReference" (
		var <- strategy9variableer
	 ),
	strategy9variableel : CONSTRAINT!"Variable" (
		number <- 23
	 ),
	strategy9variableer : CONSTRAINT!"Variable" (
		number <- 24
	 ),
	strategy9constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- strategy9constraint1comparisonvar
	 ),
	strategy9constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- strategy9constraint1lhs,
		right <- strategy9constraint1rhs,
		operation <- #LessEqual
	 ),
	strategy9constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- strategy9variableel
	 ),
	strategy9constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- strategy9variableer
	 )
do {
 }
 }

rule BoolRule {
	from invar : TYPEDUCIF!"Bool" (thisModule.BoolGuard(invar))
	to Boolvar : TYPEDUCIF!"Bool" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint11targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint11varequation,constraint11sortvarequation},
		localconstraints <- OrderedSet{constraint11constraint1},
		localvariables <- OrderedSet{constraint11variablet}
	 ),
	constraint11varequation : CONSTRAINT!"Equation" (
		left <- constraint11rulevarref,
		right <- constraint11expressionvar
	 ),
	constraint11rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint11constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint11constraint1comparisonvar
	 ),
	constraint11constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint11constraint1lhs,
		right <- constraint11constraint1rhs,
		operation <- #Equal
	 ),
	constraint11constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint11variablet
	 ),
	constraint11constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint11expressionvar : CONSTRAINT!"Literal" (
		value <- '1'
	 ),
	constraint11variablet : CONSTRAINT!"Variable" (
		number <- 25
	 ),
	constraint11sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint11sortexpvarref,
		right <- constraint11sortexpressionvar
	 ),
	constraint11sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint11sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint11variablet
	 )
do {
 }
 }

rule PosRule {
	from invar : TYPEDUCIF!"Pos" (thisModule.PosGuard(invar))
	to Posvar : TYPEDUCIF!"Pos" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint21targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint21varequation,constraint21sortvarequation},
		localconstraints <- OrderedSet{constraint21constraint1},
		localvariables <- OrderedSet{constraint21variablet}
	 ),
	constraint21varequation : CONSTRAINT!"Equation" (
		left <- constraint21rulevarref,
		right <- constraint21expressionvar
	 ),
	constraint21rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint21constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint21constraint1comparisonvar
	 ),
	constraint21constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint21constraint1lhs,
		right <- constraint21constraint1rhs,
		operation <- #Equal
	 ),
	constraint21constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint21variablet
	 ),
	constraint21constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_PosSort',
		features <- OrderedSet{}
	 ),
	constraint21expressionvar : CONSTRAINT!"Literal" (
		value <- '2'
	 ),
	constraint21variablet : CONSTRAINT!"Variable" (
		number <- 26
	 ),
	constraint21sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint21sortexpvarref,
		right <- constraint21sortexpressionvar
	 ),
	constraint21sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint21sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint21variablet
	 )
do {
 }
 }

rule NatRule {
	from invar : TYPEDUCIF!"Nat" (thisModule.NatGuard(invar))
	to Natvar : TYPEDUCIF!"Nat" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint31targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint31varequation,constraint31sortvarequation},
		localconstraints <- OrderedSet{constraint31constraint1},
		localvariables <- OrderedSet{constraint31variablet}
	 ),
	constraint31varequation : CONSTRAINT!"Equation" (
		left <- constraint31rulevarref,
		right <- constraint31expressionvar
	 ),
	constraint31rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint31constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint31constraint1comparisonvar
	 ),
	constraint31constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint31constraint1lhs,
		right <- constraint31constraint1rhs,
		operation <- #Equal
	 ),
	constraint31constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint31variablet
	 ),
	constraint31constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	constraint31expressionvar : CONSTRAINT!"Literal" (
		value <- '3'
	 ),
	constraint31variablet : CONSTRAINT!"Variable" (
		number <- 27
	 ),
	constraint31sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint31sortexpvarref,
		right <- constraint31sortexpressionvar
	 ),
	constraint31sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint31sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint31variablet
	 )
do {
 }
 }

rule IntRule {
	from invar : TYPEDUCIF!"Int" (thisModule.IntGuard(invar))
	to Intvar : TYPEDUCIF!"Int" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint41targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint41varequation,constraint41sortvarequation},
		localconstraints <- OrderedSet{constraint41constraint1},
		localvariables <- OrderedSet{constraint41variablet}
	 ),
	constraint41varequation : CONSTRAINT!"Equation" (
		left <- constraint41rulevarref,
		right <- constraint41expressionvar
	 ),
	constraint41rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint41constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint41constraint1comparisonvar
	 ),
	constraint41constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint41constraint1lhs,
		right <- constraint41constraint1rhs,
		operation <- #Equal
	 ),
	constraint41constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint41variablet
	 ),
	constraint41constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	constraint41expressionvar : CONSTRAINT!"Literal" (
		value <- '4'
	 ),
	constraint41variablet : CONSTRAINT!"Variable" (
		number <- 28
	 ),
	constraint41sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint41sortexpvarref,
		right <- constraint41sortexpressionvar
	 ),
	constraint41sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint41sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint41variablet
	 )
do {
 }
 }

rule RealRule {
	from invar : TYPEDUCIF!"Real" (thisModule.RealGuard(invar))
	to Realvar : TYPEDUCIF!"Real" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint51targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint51varequation,constraint51sortvarequation},
		localconstraints <- OrderedSet{constraint51constraint1},
		localvariables <- OrderedSet{constraint51variablet}
	 ),
	constraint51varequation : CONSTRAINT!"Equation" (
		left <- constraint51rulevarref,
		right <- constraint51expressionvar
	 ),
	constraint51rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint51constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint51constraint1comparisonvar
	 ),
	constraint51constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint51constraint1lhs,
		right <- constraint51constraint1rhs,
		operation <- #Equal
	 ),
	constraint51constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint51variablet
	 ),
	constraint51constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint51expressionvar : CONSTRAINT!"Literal" (
		value <- '5'
	 ),
	constraint51variablet : CONSTRAINT!"Variable" (
		number <- 29
	 ),
	constraint51sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint51sortexpvarref,
		right <- constraint51sortexpressionvar
	 ),
	constraint51sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint51sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint51variablet
	 )
do {
 }
 }

rule ListRule {
	from invar : TYPEDUCIF!"List" (thisModule.ListGuard(invar))
	to Listvar : TYPEDUCIF!"List" (
		constraintvar <- invar.constraintvar,
		elementSort <- invar.elementSort
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint61targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint61varequation,constraint61sortvarequation},
		localconstraints <- OrderedSet{constraint61elementSortinit,constraint61constraint1},
		localvariables <- OrderedSet{constraint61variablees,constraint61variablet}
	 ),
	constraint61varequation : CONSTRAINT!"Equation" (
		left <- constraint61rulevarref,
		right <- constraint61expressionvar
	 ),
	constraint61rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint61constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint61constraint1comparisonvar
	 ),
	constraint61constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint61constraint1lhs,
		right <- constraint61constraint1rhs,
		operation <- #Equal
	 ),
	constraint61constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint61variablet
	 ),
	constraint61constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint61constraint1rhs1}
	 ),
	constraint61constraint1rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint61constraint1rhs1elementSortvalue
	 ),
	constraint61constraint1rhs1elementSortvalue : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint61constraint1rhs1elementSortvalueleft
	 ),
	constraint61constraint1rhs1elementSortvalueleft : CONSTRAINT!"VariableReference" (
		var <- constraint61variablees
	 ),
	constraint61elementSortinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint61elementSortinitcomp
	 ),
	constraint61elementSortinitcomp : CONSTRAINT!"Equation" (
		left <- constraint61elementSortexpvarref,
		right <- if (not invar.elementSort.oclIsUndefined()) then thisModule.makeObjectNode(invar.elementSort)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint61elementSortexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint61variablees
	 ),
	constraint61expressionvar : CONSTRAINT!"Literal" (
		value <- '6'
	 ),
	constraint61variablees : CONSTRAINT!"Variable" (
		number <- 30
	 ),
	constraint61variablet : CONSTRAINT!"Variable" (
		number <- 31
	 ),
	constraint61sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint61sortexpvarref,
		right <- constraint61sortexpressionvar
	 ),
	constraint61sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint61sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint61variablet
	 )
do {
 }
 }

rule SetRule {
	from invar : TYPEDUCIF!"Set" (thisModule.SetGuard(invar))
	to Setvar : TYPEDUCIF!"Set" (
		constraintvar <- invar.constraintvar,
		elementSort <- invar.elementSort
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint71targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint71varequation,constraint71sortvarequation},
		localconstraints <- OrderedSet{constraint71elementSortinit,constraint71constraint1},
		localvariables <- OrderedSet{constraint71variablees,constraint71variablet}
	 ),
	constraint71varequation : CONSTRAINT!"Equation" (
		left <- constraint71rulevarref,
		right <- constraint71expressionvar
	 ),
	constraint71rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint71constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint71constraint1comparisonvar
	 ),
	constraint71constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint71constraint1lhs,
		right <- constraint71constraint1rhs,
		operation <- #Equal
	 ),
	constraint71constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint71variablet
	 ),
	constraint71constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint71constraint1rhs1}
	 ),
	constraint71constraint1rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint71constraint1rhs1elementSortvalue
	 ),
	constraint71constraint1rhs1elementSortvalue : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint71constraint1rhs1elementSortvalueleft
	 ),
	constraint71constraint1rhs1elementSortvalueleft : CONSTRAINT!"VariableReference" (
		var <- constraint71variablees
	 ),
	constraint71elementSortinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint71elementSortinitcomp
	 ),
	constraint71elementSortinitcomp : CONSTRAINT!"Equation" (
		left <- constraint71elementSortexpvarref,
		right <- if (not invar.elementSort.oclIsUndefined()) then thisModule.makeObjectNode(invar.elementSort)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint71elementSortexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint71variablees
	 ),
	constraint71expressionvar : CONSTRAINT!"Literal" (
		value <- '7'
	 ),
	constraint71variablees : CONSTRAINT!"Variable" (
		number <- 32
	 ),
	constraint71variablet : CONSTRAINT!"Variable" (
		number <- 33
	 ),
	constraint71sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint71sortexpvarref,
		right <- constraint71sortexpressionvar
	 ),
	constraint71sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint71sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint71variablet
	 )
do {
 }
 }

rule BagRule {
	from invar : TYPEDUCIF!"Bag" (thisModule.BagGuard(invar))
	to Bagvar : TYPEDUCIF!"Bag" (
		constraintvar <- invar.constraintvar,
		elementSort <- invar.elementSort
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint81targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint81varequation,constraint81sortvarequation},
		localconstraints <- OrderedSet{constraint81elementSortinit,constraint81constraint1},
		localvariables <- OrderedSet{constraint81variablees,constraint81variablet}
	 ),
	constraint81varequation : CONSTRAINT!"Equation" (
		left <- constraint81rulevarref,
		right <- constraint81expressionvar
	 ),
	constraint81rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint81constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint81constraint1comparisonvar
	 ),
	constraint81constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint81constraint1lhs,
		right <- constraint81constraint1rhs,
		operation <- #Equal
	 ),
	constraint81constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint81variablet
	 ),
	constraint81constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{constraint81constraint1rhs1}
	 ),
	constraint81constraint1rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint81constraint1rhs1elementSortvalue
	 ),
	constraint81constraint1rhs1elementSortvalue : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint81constraint1rhs1elementSortvalueleft
	 ),
	constraint81constraint1rhs1elementSortvalueleft : CONSTRAINT!"VariableReference" (
		var <- constraint81variablees
	 ),
	constraint81elementSortinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint81elementSortinitcomp
	 ),
	constraint81elementSortinitcomp : CONSTRAINT!"Equation" (
		left <- constraint81elementSortexpvarref,
		right <- if (not invar.elementSort.oclIsUndefined()) then thisModule.makeObjectNode(invar.elementSort)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint81elementSortexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint81variablees
	 ),
	constraint81expressionvar : CONSTRAINT!"Literal" (
		value <- '8'
	 ),
	constraint81variablees : CONSTRAINT!"Variable" (
		number <- 34
	 ),
	constraint81variablet : CONSTRAINT!"Variable" (
		number <- 35
	 ),
	constraint81sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint81sortexpvarref,
		right <- constraint81sortexpressionvar
	 ),
	constraint81sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint81sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint81variablet
	 )
do {
 }
 }

rule SortRefRule {
	from invar : TYPEDUCIF!"SortRef" (thisModule.SortRefGuard(invar))
	to SortRefvar : TYPEDUCIF!"SortRef" (
		sortname <- invar.sortname,
		sort <- invar.sort,
		constraintvar <- invar.constraintvar,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint101targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint101varequation,constraint101sortvarequation},
		localconstraints <- OrderedSet{constraint101sortnameinit,constraint101linksinit,constraint101constraint1,constraint101constraint2},
		localvariables <- OrderedSet{constraint101variablen,constraint101variableenv,constraint101variables}
	 ),
	constraint101varequation : CONSTRAINT!"Equation" (
		left <- constraint101rulevarref,
		right <- constraint101expressionvar
	 ),
	constraint101rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint101constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint101constraint1comparisonvar
	 ),
	constraint101constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint101constraint1lhs,
		right <- constraint101constraint1rhs,
		operation <- #Element
	 ),
	constraint101constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint101variables
	 ),
	constraint101constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint101variableenv
	 ),
	constraint101constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint101constraint2comparisonvar
	 ),
	constraint101constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint101constraint2lhs,
		right <- constraint101constraint2rhs,
		operation <- #Equal
	 ),
	constraint101constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint101variables
	 ),
	constraint101constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_StructureSort',
		features <- OrderedSet{constraint101constraint2rhs1}
	 ),
	constraint101constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint101constraint2rhs1namevalue
	 ),
	constraint101constraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint101variablen
	 ),
	constraint101sortnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint101sortnameinitcomp
	 ),
	constraint101sortnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint101sortnameexpvarref,
		right <- if (not invar.sortname.oclIsUndefined()) then thisModule.makeLiteral(invar.sortname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint101sortnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint101variablen
	 ),
	constraint101linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint101linksinitcomp
	 ),
	constraint101linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint101linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint101linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint101variableenv
	 ),
	constraint101expressionvar : CONSTRAINT!"Literal" (
		value <- '10'
	 ),
	constraint101variablen : CONSTRAINT!"Variable" (
		number <- 36
	 ),
	constraint101variableenv : CONSTRAINT!"Variable" (
		number <- 37
	 ),
	constraint101variables : CONSTRAINT!"Variable" (
		number <- 38
	 ),
	constraint101sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint101sortexpvarref,
		right <- constraint101sortexpressionvar
	 ),
	constraint101sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint101sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint101variables
	 ),
	constraint112targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint112varequation,constraint112sortvarequation},
		localconstraints <- OrderedSet{constraint112sortnameinit,constraint112linksinit,constraint112constraint1,constraint112constraint2,constraint112constraint3},
		localvariables <- OrderedSet{constraint112variablees,constraint112variablen,constraint112variableenv,constraint112variables}
	 ),
	constraint112varequation : CONSTRAINT!"Equation" (
		left <- constraint112rulevarref,
		right <- constraint112expressionvar
	 ),
	constraint112rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint112constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint112constraint1comparisonvar
	 ),
	constraint112constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint112constraint1lhs,
		right <- constraint112constraint1rhs,
		operation <- #Element
	 ),
	constraint112constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint112variablees
	 ),
	constraint112constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint112variableenv
	 ),
	constraint112constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint112constraint2comparisonvar
	 ),
	constraint112constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint112constraint2lhs,
		right <- constraint112constraint2rhs,
		operation <- #Equal
	 ),
	constraint112constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint112variablees
	 ),
	constraint112constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_ExpressionSort',
		features <- OrderedSet{constraint112constraint2rhs1}
	 ),
	constraint112constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint112constraint2rhs1namevalue
	 ),
	constraint112constraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint112variablen
	 ),
	constraint112constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint112constraint3comparisonvar
	 ),
	constraint112constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint112constraint3lhs,
		right <- constraint112constraint3rhs,
		operation <- #Equal
	 ),
	constraint112constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint112variables
	 ),
	constraint112constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint112constraint3rhsleft
	 ),
	constraint112constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'expression',
		expression <- constraint112constraint3rhsleftleft
	 ),
	constraint112constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint112variablees
	 ),
	constraint112sortnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint112sortnameinitcomp
	 ),
	constraint112sortnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint112sortnameexpvarref,
		right <- if (not invar.sortname.oclIsUndefined()) then thisModule.makeLiteral(invar.sortname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint112sortnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint112variablen
	 ),
	constraint112linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint112linksinitcomp
	 ),
	constraint112linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint112linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint112linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint112variableenv
	 ),
	constraint112expressionvar : CONSTRAINT!"Literal" (
		value <- '11'
	 ),
	constraint112variablees : CONSTRAINT!"Variable" (
		number <- 39
	 ),
	constraint112variablen : CONSTRAINT!"Variable" (
		number <- 40
	 ),
	constraint112variableenv : CONSTRAINT!"Variable" (
		number <- 41
	 ),
	constraint112variables : CONSTRAINT!"Variable" (
		number <- 42
	 ),
	constraint112sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint112sortexpvarref,
		right <- constraint112sortexpressionvar
	 ),
	constraint112sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint112sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint112variables
	 ),
	error11targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'error',
		equation <- OrderedSet{error11varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	error11varequation : CONSTRAINT!"Equation" (
		left <- error11rulevarref,
		right <- error11expressionvar
	 ),
	error11rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	error11expressionvar : CONSTRAINT!"ObjectNode" (
		name <- 'error',
		features <- OrderedSet{error11messagefeature}
	 ),
	error11messagefeature : CONSTRAINT!"Feature" (
		name <- 'message',
		value <- error11messageliteral
	 ),
	error11messageliteral : CONSTRAINT!"Literal" (
		value <- 'No such sort'
	 )
do {
 }
 }

rule HigherOrderRule {
	from invar : TYPEDUCIF!"HigherOrder" (thisModule.HigherOrderGuard(invar))
	to HigherOrdervar : TYPEDUCIF!"HigherOrder" (
		constraintvar <- invar.constraintvar,
		domain <- invar.domain,
		result <- invar.result
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint91targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint91varequation,constraint91sortvarequation},
		localconstraints <- OrderedSet{constraint91domaininit,constraint91resultinit,constraint91constraint1,constraint91constraint2,constraint91constraint3},
		localvariables <- OrderedSet{constraint91variabledslist,constraint91variablersort,constraint91variabledlist,constraint91variabler,constraint91variablet}
	 ),
	constraint91varequation : CONSTRAINT!"Equation" (
		left <- constraint91rulevarref,
		right <- constraint91expressionvar
	 ),
	constraint91rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint91constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint91constraint1dgenerator,constraint91constraint1dsgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint91constraint1localconstraint1}
	 ),
	constraint91constraint1dgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint91constraint1variabled},
		container <- constraint91constraint1dlisttarget
	 ),
	constraint91constraint1dlisttarget : CONSTRAINT!"VariableReference" (
		var <- constraint91variabledlist
	 ),
	constraint91constraint1variabled : CONSTRAINT!"Variable" (
		number <- 48
	 ),
	constraint91constraint1dsgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint91constraint1variableds},
		container <- constraint91constraint1dslisttarget
	 ),
	constraint91constraint1dslisttarget : CONSTRAINT!"VariableReference" (
		var <- constraint91variabledslist
	 ),
	constraint91constraint1variableds : CONSTRAINT!"Variable" (
		number <- 49
	 ),
	constraint91constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint91constraint1localconstraint1comparisonvar
	 ),
	constraint91constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint91constraint1localconstraint1lhs,
		right <- constraint91constraint1localconstraint1rhs,
		operation <- #Equal
	 ),
	constraint91constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint91constraint1variableds
	 ),
	constraint91constraint1localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint91constraint1localconstraint1rhsleft
	 ),
	constraint91constraint1localconstraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint91constraint1variabled
	 ),
	constraint91constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint91constraint2comparisonvar
	 ),
	constraint91constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint91constraint2lhs,
		right <- constraint91constraint2rhs,
		operation <- #Equal
	 ),
	constraint91constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint91variablersort
	 ),
	constraint91constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint91constraint2rhsleft
	 ),
	constraint91constraint2rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint91variabler
	 ),
	constraint91constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint91constraint3comparisonvar
	 ),
	constraint91constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint91constraint3lhs,
		right <- constraint91constraint3rhs,
		operation <- #Equal
	 ),
	constraint91constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint91variablet
	 ),
	constraint91constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_HigherOrderSort',
		features <- OrderedSet{constraint91constraint3rhs1,constraint91constraint3rhs2}
	 ),
	constraint91constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'domain',
		value <- constraint91constraint3rhs1domainvalue
	 ),
	constraint91constraint3rhs1domainvalue : CONSTRAINT!"VariableReference" (
		var <- constraint91variabledslist
	 ),
	constraint91constraint3rhs2 : CONSTRAINT!"Feature" (
		name <- 'result',
		value <- constraint91constraint3rhs2resultvalue
	 ),
	constraint91constraint3rhs2resultvalue : CONSTRAINT!"VariableReference" (
		var <- constraint91variablersort
	 ),
	constraint91domaininit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint91domaininitcomp
	 ),
	constraint91domaininitcomp : CONSTRAINT!"Equation" (
		left <- constraint91domainexpvarref,
		right <- if (not invar.domain.oclIsUndefined()) then thisModule.makeListNode(invar.domain->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint91domainexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint91variabledlist
	 ),
	constraint91resultinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint91resultinitcomp
	 ),
	constraint91resultinitcomp : CONSTRAINT!"Equation" (
		left <- constraint91resultexpvarref,
		right <- if (not invar.result.oclIsUndefined()) then thisModule.makeObjectNode(invar.result)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint91resultexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint91variabler
	 ),
	constraint91expressionvar : CONSTRAINT!"Literal" (
		value <- '9'
	 ),
	constraint91variabledslist : CONSTRAINT!"Variable" (
		number <- 43
	 ),
	constraint91variablersort : CONSTRAINT!"Variable" (
		number <- 44
	 ),
	constraint91variabledlist : CONSTRAINT!"Variable" (
		number <- 45
	 ),
	constraint91variabler : CONSTRAINT!"Variable" (
		number <- 46
	 ),
	constraint91variablet : CONSTRAINT!"Variable" (
		number <- 47
	 ),
	constraint91sortvarequation : CONSTRAINT!"Equation" (
		left <- constraint91sortexpvarref,
		right <- constraint91sortexpressionvar
	 ),
	constraint91sortexpvarref : CONSTRAINT!"VariableReference" (
		var <- sortvariablevar
	 ),
	constraint91sortexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint91variablet
	 )
do {
 }
 }

rule EquationRule {
	from invar : TYPEDUCIF!"Equation" (thisModule.EquationGuard(invar))
	to Equationvar : TYPEDUCIF!"Equation" (
		constraintvar <- invar.constraintvar,
		condition <- invar.condition,
		left <- invar.left,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint531targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint531varequation},
		localconstraints <- OrderedSet{constraint531leftinit,constraint531rightinit,constraint531constraint1,constraint531constraint2},
		localvariables <- OrderedSet{constraint531variablet,constraint531variablel,constraint531variabler}
	 ),
	constraint531varequation : CONSTRAINT!"Equation" (
		left <- constraint531rulevarref,
		right <- constraint531expressionvar
	 ),
	constraint531rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint531constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint531constraint1comparisonvar
	 ),
	constraint531constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint531constraint1lhs,
		right <- constraint531constraint1rhs,
		operation <- #GreaterEqual
	 ),
	constraint531constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint531variablet
	 ),
	constraint531constraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint531constraint1rhsleft
	 ),
	constraint531constraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint531constraint1rhsleftleft
	 ),
	constraint531constraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint531variablel
	 ),
	constraint531constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint531constraint2comparisonvar
	 ),
	constraint531constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint531constraint2lhs,
		right <- constraint531constraint2rhs,
		operation <- #GreaterEqual
	 ),
	constraint531constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint531variablet
	 ),
	constraint531constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint531constraint2rhsleft
	 ),
	constraint531constraint2rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint531constraint2rhsleftleft
	 ),
	constraint531constraint2rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint531variabler
	 ),
	constraint531leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint531leftinitcomp
	 ),
	constraint531leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint531leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint531leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint531variablel
	 ),
	constraint531rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint531rightinitcomp
	 ),
	constraint531rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint531rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint531rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint531variabler
	 ),
	constraint531expressionvar : CONSTRAINT!"Literal" (
		value <- '53'
	 ),
	constraint531variablet : CONSTRAINT!"Variable" (
		number <- 50
	 ),
	constraint531variablel : CONSTRAINT!"Variable" (
		number <- 51
	 ),
	constraint531variabler : CONSTRAINT!"Variable" (
		number <- 52
	 )
do {
 }
 }

rule AtomicActionRule {
	from invar : TYPEDUCIF!"AtomicAction" (thisModule.AtomicActionGuard(invar))
	to AtomicActionvar : TYPEDUCIF!"AtomicAction" (
		atomname <- invar.atomname,
		constraintvar <- invar.constraintvar,
		links <- invar.links,
		arguments <- invar.arguments
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint121targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint121varequation,constraint121atomvarequation},
		localconstraints <- OrderedSet{constraint121atomnameinit,constraint121linksinit,constraint121argumentsinit,constraint121constraint1,constraint121constraint2,constraint121constraint3},
		localvariables <- OrderedSet{constraint121variablet,constraint121variablename,constraint121variableenv,constraint121variableargs,constraint121variablea}
	 ),
	constraint121varequation : CONSTRAINT!"Equation" (
		left <- constraint121rulevarref,
		right <- constraint121expressionvar
	 ),
	constraint121rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint121constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint121constraint1comparisonvar
	 ),
	constraint121constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint121constraint1lhs,
		right <- constraint121constraint1rhs,
		operation <- #Element
	 ),
	constraint121constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint121variablea
	 ),
	constraint121constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint121variableenv
	 ),
	constraint121constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint121constraint2comparisonvar
	 ),
	constraint121constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint121constraint2lhs,
		right <- constraint121constraint2rhs,
		operation <- #Equal
	 ),
	constraint121constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint121variablea
	 ),
	constraint121constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint121constraint2rhs1,constraint121constraint2rhs2}
	 ),
	constraint121constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint121constraint2rhs1namevalue
	 ),
	constraint121constraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint121variablename
	 ),
	constraint121constraint2rhs2 : CONSTRAINT!"Feature" (
		name <- 'type',
		value <- constraint121constraint2rhs2typevalue
	 ),
	constraint121constraint2rhs2typevalue : CONSTRAINT!"VariableReference" (
		var <- constraint121variablet
	 ),
	constraint121constraint3 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint121constraint3arggenerator,constraint121constraint3paramgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint121constraint3localconstraint1}
	 ),
	constraint121constraint3arggenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint121constraint3variablearg},
		container <- constraint121constraint3argstarget
	 ),
	constraint121constraint3argstarget : CONSTRAINT!"VariableReference" (
		var <- constraint121variableargs
	 ),
	constraint121constraint3variablearg : CONSTRAINT!"Variable" (
		number <- 58
	 ),
	constraint121constraint3paramgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint121constraint3variableparam},
		container <- constraint121constraint3ttarget
	 ),
	constraint121constraint3ttarget : CONSTRAINT!"VariableReference" (
		var <- constraint121variablet
	 ),
	constraint121constraint3variableparam : CONSTRAINT!"Variable" (
		number <- 59
	 ),
	constraint121constraint3localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint121constraint3localconstraint1comparisonvar
	 ),
	constraint121constraint3localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint121constraint3localconstraint1lhs,
		right <- constraint121constraint3localconstraint1rhs,
		operation <- #LessEqual
	 ),
	constraint121constraint3localconstraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint121constraint3localconstraint1lhsleft
	 ),
	constraint121constraint3localconstraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint121constraint3localconstraint1lhsleftleft
	 ),
	constraint121constraint3localconstraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint121constraint3variablearg
	 ),
	constraint121constraint3localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint121constraint3localconstraint1rhsleft
	 ),
	constraint121constraint3localconstraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint121constraint3variableparam
	 ),
	constraint121atomnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint121atomnameinitcomp
	 ),
	constraint121atomnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint121atomnameexpvarref,
		right <- if (not invar.atomname.oclIsUndefined()) then thisModule.makeLiteral(invar.atomname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint121atomnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint121variablename
	 ),
	constraint121linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint121linksinitcomp
	 ),
	constraint121linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint121linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint121linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint121variableenv
	 ),
	constraint121argumentsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint121argumentsinitcomp
	 ),
	constraint121argumentsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint121argumentsexpvarref,
		right <- if (not invar.arguments.oclIsUndefined()) then thisModule.makeListNode(invar.arguments->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint121argumentsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint121variableargs
	 ),
	constraint121expressionvar : CONSTRAINT!"Literal" (
		value <- '12'
	 ),
	constraint121variablet : CONSTRAINT!"Variable" (
		number <- 53
	 ),
	constraint121variablename : CONSTRAINT!"Variable" (
		number <- 54
	 ),
	constraint121variableenv : CONSTRAINT!"Variable" (
		number <- 55
	 ),
	constraint121variableargs : CONSTRAINT!"Variable" (
		number <- 56
	 ),
	constraint121variablea : CONSTRAINT!"Variable" (
		number <- 57
	 ),
	constraint121atomvarequation : CONSTRAINT!"Equation" (
		left <- constraint121atomexpvarref,
		right <- constraint121atomexpressionvar
	 ),
	constraint121atomexpvarref : CONSTRAINT!"VariableReference" (
		var <- atomvariablevar
	 ),
	constraint121atomexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint121variablea
	 ),
	constraint132targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint132varequation,constraint132processvarequation},
		localconstraints <- OrderedSet{constraint132atomnameinit,constraint132linksinit,constraint132argumentsinit,constraint132constraint1,constraint132constraint2,constraint132constraint3},
		localvariables <- OrderedSet{constraint132variablet,constraint132variablename,constraint132variableenv,constraint132variableargs,constraint132variablep}
	 ),
	constraint132varequation : CONSTRAINT!"Equation" (
		left <- constraint132rulevarref,
		right <- constraint132expressionvar
	 ),
	constraint132rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint132constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint132constraint1comparisonvar
	 ),
	constraint132constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint132constraint1lhs,
		right <- constraint132constraint1rhs,
		operation <- #Element
	 ),
	constraint132constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint132variablep
	 ),
	constraint132constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint132variableenv
	 ),
	constraint132constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint132constraint2comparisonvar
	 ),
	constraint132constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint132constraint2lhs,
		right <- constraint132constraint2rhs,
		operation <- #Equal
	 ),
	constraint132constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint132variablep
	 ),
	constraint132constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Process',
		features <- OrderedSet{constraint132constraint2rhs1,constraint132constraint2rhs2}
	 ),
	constraint132constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint132constraint2rhs1namevalue
	 ),
	constraint132constraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint132variablename
	 ),
	constraint132constraint2rhs2 : CONSTRAINT!"Feature" (
		name <- 'parameters',
		value <- constraint132constraint2rhs2parametersvalue
	 ),
	constraint132constraint2rhs2parametersvalue : CONSTRAINT!"VariableReference" (
		var <- constraint132variablet
	 ),
	constraint132constraint3 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint132constraint3arggenerator,constraint132constraint3paramgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint132constraint3localconstraint1}
	 ),
	constraint132constraint3arggenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint132constraint3variablearg},
		container <- constraint132constraint3argstarget
	 ),
	constraint132constraint3argstarget : CONSTRAINT!"VariableReference" (
		var <- constraint132variableargs
	 ),
	constraint132constraint3variablearg : CONSTRAINT!"Variable" (
		number <- 65
	 ),
	constraint132constraint3paramgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint132constraint3variableparam},
		container <- constraint132constraint3ttarget
	 ),
	constraint132constraint3ttarget : CONSTRAINT!"VariableReference" (
		var <- constraint132variablet
	 ),
	constraint132constraint3variableparam : CONSTRAINT!"Variable" (
		number <- 66
	 ),
	constraint132constraint3localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint132constraint3localconstraint1comparisonvar
	 ),
	constraint132constraint3localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint132constraint3localconstraint1lhs,
		right <- constraint132constraint3localconstraint1rhs,
		operation <- #LessEqual
	 ),
	constraint132constraint3localconstraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint132constraint3localconstraint1lhsleft
	 ),
	constraint132constraint3localconstraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint132constraint3localconstraint1lhsleftleft
	 ),
	constraint132constraint3localconstraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint132constraint3variablearg
	 ),
	constraint132constraint3localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint132constraint3localconstraint1rhsleft
	 ),
	constraint132constraint3localconstraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint132constraint3localconstraint1rhsleftleft
	 ),
	constraint132constraint3localconstraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint132constraint3variableparam
	 ),
	constraint132atomnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint132atomnameinitcomp
	 ),
	constraint132atomnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint132atomnameexpvarref,
		right <- if (not invar.atomname.oclIsUndefined()) then thisModule.makeLiteral(invar.atomname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint132atomnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint132variablename
	 ),
	constraint132linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint132linksinitcomp
	 ),
	constraint132linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint132linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint132linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint132variableenv
	 ),
	constraint132argumentsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint132argumentsinitcomp
	 ),
	constraint132argumentsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint132argumentsexpvarref,
		right <- if (not invar.arguments.oclIsUndefined()) then thisModule.makeListNode(invar.arguments->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint132argumentsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint132variableargs
	 ),
	constraint132expressionvar : CONSTRAINT!"Literal" (
		value <- '13'
	 ),
	constraint132variablet : CONSTRAINT!"Variable" (
		number <- 60
	 ),
	constraint132variablename : CONSTRAINT!"Variable" (
		number <- 61
	 ),
	constraint132variableenv : CONSTRAINT!"Variable" (
		number <- 62
	 ),
	constraint132variableargs : CONSTRAINT!"Variable" (
		number <- 63
	 ),
	constraint132variablep : CONSTRAINT!"Variable" (
		number <- 64
	 ),
	constraint132processvarequation : CONSTRAINT!"Equation" (
		left <- constraint132processexpvarref,
		right <- constraint132processexpressionvar
	 ),
	constraint132processexpvarref : CONSTRAINT!"VariableReference" (
		var <- processvariablevar
	 ),
	constraint132processexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint132variablep
	 ),
	constraint143targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint143varequation,constraint143processvarequation},
		localconstraints <- OrderedSet{constraint143atomnameinit,constraint143linksinit,constraint143argumentsinit,constraint143ProcessDeclinit,constraint143constraint1,constraint143constraint2,constraint143constraint3},
		localvariables <- OrderedSet{constraint143variableparent,constraint143variablename,constraint143variableenv,constraint143variableargs,constraint143variablep}
	 ),
	constraint143varequation : CONSTRAINT!"Equation" (
		left <- constraint143rulevarref,
		right <- constraint143expressionvar
	 ),
	constraint143rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint143constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint143constraint1comparisonvar
	 ),
	constraint143constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint143constraint1lhs,
		right <- constraint143constraint1rhs,
		operation <- #Equal
	 ),
	constraint143constraint1lhs : CONSTRAINT!"UnaryNode" (
		operator <- #Length,
		left <- constraint143constraint1lhsleft
	 ),
	constraint143constraint1lhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint143variableargs
	 ),
	constraint143constraint1rhs : CONSTRAINT!"Literal" (
		value <- '0'
	 ),
	constraint143constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint143constraint2comparisonvar
	 ),
	constraint143constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint143constraint2lhs,
		right <- constraint143constraint2rhs,
		operation <- #Equal
	 ),
	constraint143constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint143variableparent
	 ),
	constraint143constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_ProcessDecl',
		features <- OrderedSet{constraint143constraint2rhs1}
	 ),
	constraint143constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'process',
		value <- constraint143constraint2rhs1processvalue
	 ),
	constraint143constraint2rhs1processvalue : CONSTRAINT!"VariableReference" (
		var <- constraint143variablep
	 ),
	constraint143constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint143constraint3comparisonvar
	 ),
	constraint143constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint143constraint3lhs,
		right <- constraint143constraint3rhs,
		operation <- #Equal
	 ),
	constraint143constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint143variablep
	 ),
	constraint143constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Process',
		features <- OrderedSet{constraint143constraint3rhs1}
	 ),
	constraint143constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint143constraint3rhs1namevalue
	 ),
	constraint143constraint3rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint143variablename
	 ),
	constraint143atomnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint143atomnameinitcomp
	 ),
	constraint143atomnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint143atomnameexpvarref,
		right <- if (not invar.atomname.oclIsUndefined()) then thisModule.makeLiteral(invar.atomname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint143atomnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint143variablename
	 ),
	constraint143linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint143linksinitcomp
	 ),
	constraint143linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint143linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint143linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint143variableenv
	 ),
	constraint143argumentsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint143argumentsinitcomp
	 ),
	constraint143argumentsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint143argumentsexpvarref,
		right <- if (not invar.arguments.oclIsUndefined()) then thisModule.makeListNode(invar.arguments->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint143argumentsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint143variableargs
	 ),
	constraint143ProcessDeclinit : CONSTRAINT!"EquationConstraint" (
		name <- 'container',
		equation <- constraint143ProcessDeclinitcomp
	 ),
	constraint143ProcessDeclinitcomp : CONSTRAINT!"Equation" (
		left <- constraint143ProcessDeclexpvarref,
		right <- let parent : ECORE!EObject = thisModule.getContainer(invar,'ProcessDecl') in if parent.oclIsUndefined() then OclUndefined else thisModule.makeObjectNode(parent) endif,
		operation <- #Equal
	 ),
	constraint143ProcessDeclexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint143variableparent
	 ),
	constraint143expressionvar : CONSTRAINT!"Literal" (
		value <- '14'
	 ),
	constraint143variableparent : CONSTRAINT!"Variable" (
		number <- 67
	 ),
	constraint143variablename : CONSTRAINT!"Variable" (
		number <- 68
	 ),
	constraint143variableenv : CONSTRAINT!"Variable" (
		number <- 69
	 ),
	constraint143variableargs : CONSTRAINT!"Variable" (
		number <- 70
	 ),
	constraint143variablep : CONSTRAINT!"Variable" (
		number <- 71
	 ),
	constraint143processvarequation : CONSTRAINT!"Equation" (
		left <- constraint143processexpvarref,
		right <- constraint143processexpressionvar
	 ),
	constraint143processexpvarref : CONSTRAINT!"VariableReference" (
		var <- processvariablevar
	 ),
	constraint143processexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint143variablep
	 )
do {
 }
 }

rule DeadlockRule {
	from invar : TYPEDUCIF!"Deadlock" (thisModule.DeadlockGuard(invar))
	to Deadlockvar : TYPEDUCIF!"Deadlock" (
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint571targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint571varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint571varequation : CONSTRAINT!"Equation" (
		left <- constraint571rulevarref,
		right <- constraint571expressionvar
	 ),
	constraint571rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint571expressionvar : CONSTRAINT!"Literal" (
		value <- '57'
	 )
do {
 }
 }

rule SummationRule {
	from invar : TYPEDUCIF!"Summation" (thisModule.SummationGuard(invar))
	to Summationvar : TYPEDUCIF!"Summation" (
		constraintvar <- invar.constraintvar,
		parameters <- invar.parameters,
		child <- invar.child
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint561targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint561varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint561varequation : CONSTRAINT!"Equation" (
		left <- constraint561rulevarref,
		right <- constraint561expressionvar
	 ),
	constraint561rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint561expressionvar : CONSTRAINT!"Literal" (
		value <- '56'
	 )
do {
 }
 }

rule BlockRule {
	from invar : TYPEDUCIF!"Block" (thisModule.BlockGuard(invar))
	to Blockvar : TYPEDUCIF!"Block" (
		atomnames <- invar.atomnames,
		constraintvar <- invar.constraintvar,
		child <- invar.child,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint151targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint151varequation,constraint151atomsvarequation},
		localconstraints <- OrderedSet{constraint151atomnamesinit,constraint151linksinit,constraint151constraint1},
		localvariables <- OrderedSet{constraint151variableanames,constraint151variableenv,constraint151variableatoms}
	 ),
	constraint151varequation : CONSTRAINT!"Equation" (
		left <- constraint151rulevarref,
		right <- constraint151expressionvar
	 ),
	constraint151rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint151constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint151constraint1anamegenerator,constraint151constraint1atomgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint151constraint1localconstraint1,constraint151constraint1localconstraint2}
	 ),
	constraint151constraint1anamegenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint151constraint1variableaname},
		container <- constraint151constraint1anamestarget
	 ),
	constraint151constraint1anamestarget : CONSTRAINT!"VariableReference" (
		var <- constraint151variableanames
	 ),
	constraint151constraint1variableaname : CONSTRAINT!"Variable" (
		number <- 75
	 ),
	constraint151constraint1atomgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint151constraint1variableatom},
		container <- constraint151constraint1atomstarget
	 ),
	constraint151constraint1atomstarget : CONSTRAINT!"VariableReference" (
		var <- constraint151variableatoms
	 ),
	constraint151constraint1variableatom : CONSTRAINT!"Variable" (
		number <- 76
	 ),
	constraint151constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint151constraint1localconstraint1comparisonvar
	 ),
	constraint151constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint151constraint1localconstraint1lhs,
		right <- constraint151constraint1localconstraint1rhs,
		operation <- #Element
	 ),
	constraint151constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint151constraint1variableatom
	 ),
	constraint151constraint1localconstraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint151variableenv
	 ),
	constraint151constraint1localconstraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint151constraint1localconstraint2comparisonvar
	 ),
	constraint151constraint1localconstraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint151constraint1localconstraint2lhs,
		right <- constraint151constraint1localconstraint2rhs,
		operation <- #Equal
	 ),
	constraint151constraint1localconstraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint151constraint1variableatom
	 ),
	constraint151constraint1localconstraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint151constraint1localconstraint2rhs1}
	 ),
	constraint151constraint1localconstraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint151constraint1localconstraint2rhs1namevalue
	 ),
	constraint151constraint1localconstraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint151constraint1variableaname
	 ),
	constraint151atomnamesinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint151atomnamesinitcomp
	 ),
	constraint151atomnamesinitcomp : CONSTRAINT!"Equation" (
		left <- constraint151atomnamesexpvarref,
		right <- if (not invar.atomnames.oclIsUndefined()) then thisModule.makeListNode(invar.atomnames->collect(a | thisModule.makeLiteral(a)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint151atomnamesexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint151variableanames
	 ),
	constraint151linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint151linksinitcomp
	 ),
	constraint151linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint151linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint151linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint151variableenv
	 ),
	constraint151expressionvar : CONSTRAINT!"Literal" (
		value <- '15'
	 ),
	constraint151variableanames : CONSTRAINT!"Variable" (
		number <- 72
	 ),
	constraint151variableenv : CONSTRAINT!"Variable" (
		number <- 73
	 ),
	constraint151variableatoms : CONSTRAINT!"Variable" (
		number <- 74
	 ),
	constraint151atomsvarequation : CONSTRAINT!"Equation" (
		left <- constraint151atomsexpvarref,
		right <- constraint151atomsexpressionvar
	 ),
	constraint151atomsexpvarref : CONSTRAINT!"VariableReference" (
		var <- atomsvariablevar
	 ),
	constraint151atomsexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint151variableatoms
	 )
do {
 }
 }

rule AllowRule {
	from invar : TYPEDUCIF!"Allow" (thisModule.AllowGuard(invar))
	to Allowvar : TYPEDUCIF!"Allow" (
		atomnames <- invar.atomnames,
		constraintvar <- invar.constraintvar,
		child <- invar.child,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint161targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint161varequation,constraint161atomsvarequation},
		localconstraints <- OrderedSet{constraint161atomnamesinit,constraint161linksinit,constraint161constraint1},
		localvariables <- OrderedSet{constraint161variableanames,constraint161variableenv,constraint161variableatoms}
	 ),
	constraint161varequation : CONSTRAINT!"Equation" (
		left <- constraint161rulevarref,
		right <- constraint161expressionvar
	 ),
	constraint161rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint161constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint161constraint1anamegenerator,constraint161constraint1atomgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint161constraint1localconstraint1,constraint161constraint1localconstraint2}
	 ),
	constraint161constraint1anamegenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint161constraint1variableaname},
		container <- constraint161constraint1anamestarget
	 ),
	constraint161constraint1anamestarget : CONSTRAINT!"VariableReference" (
		var <- constraint161variableanames
	 ),
	constraint161constraint1variableaname : CONSTRAINT!"Variable" (
		number <- 80
	 ),
	constraint161constraint1atomgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint161constraint1variableatom},
		container <- constraint161constraint1atomstarget
	 ),
	constraint161constraint1atomstarget : CONSTRAINT!"VariableReference" (
		var <- constraint161variableatoms
	 ),
	constraint161constraint1variableatom : CONSTRAINT!"Variable" (
		number <- 81
	 ),
	constraint161constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint161constraint1localconstraint1comparisonvar
	 ),
	constraint161constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint161constraint1localconstraint1lhs,
		right <- constraint161constraint1localconstraint1rhs,
		operation <- #Element
	 ),
	constraint161constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint161constraint1variableatom
	 ),
	constraint161constraint1localconstraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint161variableenv
	 ),
	constraint161constraint1localconstraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint161constraint1localconstraint2comparisonvar
	 ),
	constraint161constraint1localconstraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint161constraint1localconstraint2lhs,
		right <- constraint161constraint1localconstraint2rhs,
		operation <- #Equal
	 ),
	constraint161constraint1localconstraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint161constraint1variableatom
	 ),
	constraint161constraint1localconstraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint161constraint1localconstraint2rhs1}
	 ),
	constraint161constraint1localconstraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint161constraint1localconstraint2rhs1namevalue
	 ),
	constraint161constraint1localconstraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint161constraint1variableaname
	 ),
	constraint161atomnamesinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint161atomnamesinitcomp
	 ),
	constraint161atomnamesinitcomp : CONSTRAINT!"Equation" (
		left <- constraint161atomnamesexpvarref,
		right <- if (not invar.atomnames.oclIsUndefined()) then thisModule.makeListNode(invar.atomnames->collect(a | thisModule.makeLiteral(a)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint161atomnamesexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint161variableanames
	 ),
	constraint161linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint161linksinitcomp
	 ),
	constraint161linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint161linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint161linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint161variableenv
	 ),
	constraint161expressionvar : CONSTRAINT!"Literal" (
		value <- '16'
	 ),
	constraint161variableanames : CONSTRAINT!"Variable" (
		number <- 77
	 ),
	constraint161variableenv : CONSTRAINT!"Variable" (
		number <- 78
	 ),
	constraint161variableatoms : CONSTRAINT!"Variable" (
		number <- 79
	 ),
	constraint161atomsvarequation : CONSTRAINT!"Equation" (
		left <- constraint161atomsexpvarref,
		right <- constraint161atomsexpressionvar
	 ),
	constraint161atomsexpvarref : CONSTRAINT!"VariableReference" (
		var <- atomsvariablevar
	 ),
	constraint161atomsexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint161variableatoms
	 )
do {
 }
 }

rule HideRule {
	from invar : TYPEDUCIF!"Hide" (thisModule.HideGuard(invar))
	to Hidevar : TYPEDUCIF!"Hide" (
		atomnames <- invar.atomnames,
		constraintvar <- invar.constraintvar,
		child <- invar.child,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint171targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint171varequation,constraint171atomsvarequation},
		localconstraints <- OrderedSet{constraint171atomnamesinit,constraint171linksinit,constraint171constraint1},
		localvariables <- OrderedSet{constraint171variableanames,constraint171variableenv,constraint171variableatoms}
	 ),
	constraint171varequation : CONSTRAINT!"Equation" (
		left <- constraint171rulevarref,
		right <- constraint171expressionvar
	 ),
	constraint171rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint171constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint171constraint1anamegenerator,constraint171constraint1atomgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint171constraint1localconstraint1,constraint171constraint1localconstraint2}
	 ),
	constraint171constraint1anamegenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint171constraint1variableaname},
		container <- constraint171constraint1anamestarget
	 ),
	constraint171constraint1anamestarget : CONSTRAINT!"VariableReference" (
		var <- constraint171variableanames
	 ),
	constraint171constraint1variableaname : CONSTRAINT!"Variable" (
		number <- 85
	 ),
	constraint171constraint1atomgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint171constraint1variableatom},
		container <- constraint171constraint1atomstarget
	 ),
	constraint171constraint1atomstarget : CONSTRAINT!"VariableReference" (
		var <- constraint171variableatoms
	 ),
	constraint171constraint1variableatom : CONSTRAINT!"Variable" (
		number <- 86
	 ),
	constraint171constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint171constraint1localconstraint1comparisonvar
	 ),
	constraint171constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint171constraint1localconstraint1lhs,
		right <- constraint171constraint1localconstraint1rhs,
		operation <- #Element
	 ),
	constraint171constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint171constraint1variableatom
	 ),
	constraint171constraint1localconstraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint171variableenv
	 ),
	constraint171constraint1localconstraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint171constraint1localconstraint2comparisonvar
	 ),
	constraint171constraint1localconstraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint171constraint1localconstraint2lhs,
		right <- constraint171constraint1localconstraint2rhs,
		operation <- #Equal
	 ),
	constraint171constraint1localconstraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint171constraint1variableatom
	 ),
	constraint171constraint1localconstraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint171constraint1localconstraint2rhs1}
	 ),
	constraint171constraint1localconstraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint171constraint1localconstraint2rhs1namevalue
	 ),
	constraint171constraint1localconstraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint171constraint1variableaname
	 ),
	constraint171atomnamesinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint171atomnamesinitcomp
	 ),
	constraint171atomnamesinitcomp : CONSTRAINT!"Equation" (
		left <- constraint171atomnamesexpvarref,
		right <- if (not invar.atomnames.oclIsUndefined()) then thisModule.makeListNode(invar.atomnames->collect(a | thisModule.makeLiteral(a)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint171atomnamesexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint171variableanames
	 ),
	constraint171linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint171linksinitcomp
	 ),
	constraint171linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint171linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint171linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint171variableenv
	 ),
	constraint171expressionvar : CONSTRAINT!"Literal" (
		value <- '17'
	 ),
	constraint171variableanames : CONSTRAINT!"Variable" (
		number <- 82
	 ),
	constraint171variableenv : CONSTRAINT!"Variable" (
		number <- 83
	 ),
	constraint171variableatoms : CONSTRAINT!"Variable" (
		number <- 84
	 ),
	constraint171atomsvarequation : CONSTRAINT!"Equation" (
		left <- constraint171atomsexpvarref,
		right <- constraint171atomsexpressionvar
	 ),
	constraint171atomsexpvarref : CONSTRAINT!"VariableReference" (
		var <- atomsvariablevar
	 ),
	constraint171atomsexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint171variableatoms
	 )
do {
 }
 }

rule RenameRule {
	from invar : TYPEDUCIF!"Rename" (thisModule.RenameGuard(invar))
	to Renamevar : TYPEDUCIF!"Rename" (
		constraintvar <- invar.constraintvar,
		child <- invar.child,
		renamings <- invar.renamings
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint181targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint181varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint181varequation : CONSTRAINT!"Equation" (
		left <- constraint181rulevarref,
		right <- constraint181expressionvar
	 ),
	constraint181rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint181expressionvar : CONSTRAINT!"Literal" (
		value <- '18'
	 )
do {
 }
 }

rule RenamingRule {
	from invar : TYPEDUCIF!"Renaming" (thisModule.RenamingGuard(invar))
	to Renamingvar : TYPEDUCIF!"Renaming" (
		oldname <- invar.oldname,
		newname <- invar.newname,
		constraintvar <- invar.constraintvar,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint191targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint191varequation,constraint191oldvarequation,constraint191newvarequation},
		localconstraints <- OrderedSet{constraint191oldnameinit,constraint191newnameinit,constraint191linksinit,constraint191constraint1,constraint191constraint2,constraint191constraint3,constraint191constraint4},
		localvariables <- OrderedSet{constraint191variableo,constraint191variablen,constraint191variableenv,constraint191variableoatom,constraint191variablenatom}
	 ),
	constraint191varequation : CONSTRAINT!"Equation" (
		left <- constraint191rulevarref,
		right <- constraint191expressionvar
	 ),
	constraint191rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint191constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint191constraint1comparisonvar
	 ),
	constraint191constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint191constraint1lhs,
		right <- constraint191constraint1rhs,
		operation <- #Element
	 ),
	constraint191constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variableoatom
	 ),
	constraint191constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variableenv
	 ),
	constraint191constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint191constraint2comparisonvar
	 ),
	constraint191constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint191constraint2lhs,
		right <- constraint191constraint2rhs,
		operation <- #Equal
	 ),
	constraint191constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variableoatom
	 ),
	constraint191constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint191constraint2rhs1}
	 ),
	constraint191constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint191constraint2rhs1namevalue
	 ),
	constraint191constraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint191variableo
	 ),
	constraint191constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint191constraint3comparisonvar
	 ),
	constraint191constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint191constraint3lhs,
		right <- constraint191constraint3rhs,
		operation <- #Element
	 ),
	constraint191constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variablenatom
	 ),
	constraint191constraint3rhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variableenv
	 ),
	constraint191constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint191constraint4comparisonvar
	 ),
	constraint191constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint191constraint4lhs,
		right <- constraint191constraint4rhs,
		operation <- #Equal
	 ),
	constraint191constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint191variablenatom
	 ),
	constraint191constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint191constraint4rhs1}
	 ),
	constraint191constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint191constraint4rhs1namevalue
	 ),
	constraint191constraint4rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint191variablen
	 ),
	constraint191oldnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint191oldnameinitcomp
	 ),
	constraint191oldnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint191oldnameexpvarref,
		right <- if (not invar.oldname.oclIsUndefined()) then thisModule.makeLiteral(invar.oldname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint191oldnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint191variableo
	 ),
	constraint191newnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint191newnameinitcomp
	 ),
	constraint191newnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint191newnameexpvarref,
		right <- if (not invar.newname.oclIsUndefined()) then thisModule.makeLiteral(invar.newname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint191newnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint191variablen
	 ),
	constraint191linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint191linksinitcomp
	 ),
	constraint191linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint191linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint191linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint191variableenv
	 ),
	constraint191expressionvar : CONSTRAINT!"Literal" (
		value <- '19'
	 ),
	constraint191variableo : CONSTRAINT!"Variable" (
		number <- 87
	 ),
	constraint191variablen : CONSTRAINT!"Variable" (
		number <- 88
	 ),
	constraint191variableenv : CONSTRAINT!"Variable" (
		number <- 89
	 ),
	constraint191variableoatom : CONSTRAINT!"Variable" (
		number <- 90
	 ),
	constraint191variablenatom : CONSTRAINT!"Variable" (
		number <- 91
	 ),
	constraint191oldvarequation : CONSTRAINT!"Equation" (
		left <- constraint191oldexpvarref,
		right <- constraint191oldexpressionvar
	 ),
	constraint191oldexpvarref : CONSTRAINT!"VariableReference" (
		var <- oldvariablevar
	 ),
	constraint191oldexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint191variableoatom
	 ),
	constraint191newvarequation : CONSTRAINT!"Equation" (
		left <- constraint191newexpvarref,
		right <- constraint191newexpressionvar
	 ),
	constraint191newexpvarref : CONSTRAINT!"VariableReference" (
		var <- newvariablevar
	 ),
	constraint191newexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint191variablenatom
	 )
do {
 }
 }

rule CommunicationRule {
	from invar : TYPEDUCIF!"Communication" (thisModule.CommunicationGuard(invar))
	to Communicationvar : TYPEDUCIF!"Communication" (
		constraintvar <- invar.constraintvar,
		communications <- invar.communications,
		action <- invar.action
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint591targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint591varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint591varequation : CONSTRAINT!"Equation" (
		left <- constraint591rulevarref,
		right <- constraint591expressionvar
	 ),
	constraint591rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint591expressionvar : CONSTRAINT!"Literal" (
		value <- '59'
	 )
do {
 }
 }

rule MultiActionRule {
	from invar : TYPEDUCIF!"MultiAction" (thisModule.MultiActionGuard(invar))
	to MultiActionvar : TYPEDUCIF!"MultiAction" (
		actionnames <- invar.actionnames,
		resultname <- invar.resultname,
		constraintvar <- invar.constraintvar,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint201targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint201varequation,constraint201actionsvarequation,constraint201resultvarequation},
		localconstraints <- OrderedSet{constraint201actionnamesinit,constraint201resultnameinit,constraint201linksinit,constraint201constraint1,constraint201constraint2,constraint201constraint3},
		localvariables <- OrderedSet{constraint201variableanames,constraint201variablern,constraint201variableenv,constraint201variableactions,constraint201variableresult}
	 ),
	constraint201varequation : CONSTRAINT!"Equation" (
		left <- constraint201rulevarref,
		right <- constraint201expressionvar
	 ),
	constraint201rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint201constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint201constraint1anamegenerator,constraint201constraint1actiongenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint201constraint1localconstraint1,constraint201constraint1localconstraint2}
	 ),
	constraint201constraint1anamegenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint201constraint1variableaname},
		container <- constraint201constraint1anamestarget
	 ),
	constraint201constraint1anamestarget : CONSTRAINT!"VariableReference" (
		var <- constraint201variableanames
	 ),
	constraint201constraint1variableaname : CONSTRAINT!"Variable" (
		number <- 97
	 ),
	constraint201constraint1actiongenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint201constraint1variableaction},
		container <- constraint201constraint1actionstarget
	 ),
	constraint201constraint1actionstarget : CONSTRAINT!"VariableReference" (
		var <- constraint201variableactions
	 ),
	constraint201constraint1variableaction : CONSTRAINT!"Variable" (
		number <- 98
	 ),
	constraint201constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint201constraint1localconstraint1comparisonvar
	 ),
	constraint201constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint201constraint1localconstraint1lhs,
		right <- constraint201constraint1localconstraint1rhs,
		operation <- #Element
	 ),
	constraint201constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint201constraint1variableaction
	 ),
	constraint201constraint1localconstraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint201variableenv
	 ),
	constraint201constraint1localconstraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint201constraint1localconstraint2comparisonvar
	 ),
	constraint201constraint1localconstraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint201constraint1localconstraint2lhs,
		right <- constraint201constraint1localconstraint2rhs,
		operation <- #Equal
	 ),
	constraint201constraint1localconstraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint201constraint1variableaction
	 ),
	constraint201constraint1localconstraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint201constraint1localconstraint2rhs1}
	 ),
	constraint201constraint1localconstraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint201constraint1localconstraint2rhs1namevalue
	 ),
	constraint201constraint1localconstraint2rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint201constraint1variableaname
	 ),
	constraint201constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint201constraint2comparisonvar
	 ),
	constraint201constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint201constraint2lhs,
		right <- constraint201constraint2rhs,
		operation <- #Element
	 ),
	constraint201constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint201variableresult
	 ),
	constraint201constraint2rhs : CONSTRAINT!"VariableReference" (
		var <- constraint201variableenv
	 ),
	constraint201constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint201constraint3comparisonvar
	 ),
	constraint201constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint201constraint3lhs,
		right <- constraint201constraint3rhs,
		operation <- #Equal
	 ),
	constraint201constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint201variableresult
	 ),
	constraint201constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Atom',
		features <- OrderedSet{constraint201constraint3rhs1}
	 ),
	constraint201constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'name',
		value <- constraint201constraint3rhs1namevalue
	 ),
	constraint201constraint3rhs1namevalue : CONSTRAINT!"VariableReference" (
		var <- constraint201variablern
	 ),
	constraint201actionnamesinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint201actionnamesinitcomp
	 ),
	constraint201actionnamesinitcomp : CONSTRAINT!"Equation" (
		left <- constraint201actionnamesexpvarref,
		right <- if (not invar.actionnames.oclIsUndefined()) then thisModule.makeListNode(invar.actionnames->collect(a | thisModule.makeLiteral(a)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint201actionnamesexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint201variableanames
	 ),
	constraint201resultnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint201resultnameinitcomp
	 ),
	constraint201resultnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint201resultnameexpvarref,
		right <- if (not invar.resultname.oclIsUndefined()) then thisModule.makeLiteral(invar.resultname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint201resultnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint201variablern
	 ),
	constraint201linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint201linksinitcomp
	 ),
	constraint201linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint201linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint201linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint201variableenv
	 ),
	constraint201expressionvar : CONSTRAINT!"Literal" (
		value <- '20'
	 ),
	constraint201variableanames : CONSTRAINT!"Variable" (
		number <- 92
	 ),
	constraint201variablern : CONSTRAINT!"Variable" (
		number <- 93
	 ),
	constraint201variableenv : CONSTRAINT!"Variable" (
		number <- 94
	 ),
	constraint201variableactions : CONSTRAINT!"Variable" (
		number <- 95
	 ),
	constraint201variableresult : CONSTRAINT!"Variable" (
		number <- 96
	 ),
	constraint201actionsvarequation : CONSTRAINT!"Equation" (
		left <- constraint201actionsexpvarref,
		right <- constraint201actionsexpressionvar
	 ),
	constraint201actionsexpvarref : CONSTRAINT!"VariableReference" (
		var <- actionsvariablevar
	 ),
	constraint201actionsexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint201variableactions
	 ),
	constraint201resultvarequation : CONSTRAINT!"Equation" (
		left <- constraint201resultexpvarref,
		right <- constraint201resultexpressionvar
	 ),
	constraint201resultexpvarref : CONSTRAINT!"VariableReference" (
		var <- resultvariablevar
	 ),
	constraint201resultexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint201variableresult
	 )
do {
 }
 }

rule SequenceRule {
	from invar : TYPEDUCIF!"Sequence" (thisModule.SequenceGuard(invar))
	to Sequencevar : TYPEDUCIF!"Sequence" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint211targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint211varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint211varequation : CONSTRAINT!"Equation" (
		left <- constraint211rulevarref,
		right <- constraint211expressionvar
	 ),
	constraint211rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint211expressionvar : CONSTRAINT!"Literal" (
		value <- '21'
	 ),
	constraint542targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint542varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint542varequation : CONSTRAINT!"Equation" (
		left <- constraint542rulevarref,
		right <- constraint542expressionvar
	 ),
	constraint542rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint542expressionvar : CONSTRAINT!"Literal" (
		value <- '54'
	 )
do {
 }
 }

rule ImplicationRule {
	from invar : TYPEDUCIF!"Implication" (thisModule.ImplicationGuard(invar))
	to Implicationvar : TYPEDUCIF!"Implication" (
		constraintvar <- invar.constraintvar,
		condition <- invar.condition,
		action <- invar.action,
		elseAction <- invar.elseAction
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint221targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint221varequation},
		localconstraints <- OrderedSet{constraint221conditioninit,constraint221constraint1},
		localvariables <- OrderedSet{constraint221variablec}
	 ),
	constraint221varequation : CONSTRAINT!"Equation" (
		left <- constraint221rulevarref,
		right <- constraint221expressionvar
	 ),
	constraint221rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint221constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint221constraint1comparisonvar
	 ),
	constraint221constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint221constraint1lhs,
		right <- constraint221constraint1rhs,
		operation <- #Equal
	 ),
	constraint221constraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint221constraint1lhsleft
	 ),
	constraint221constraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint221constraint1lhsleftleft
	 ),
	constraint221constraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint221variablec
	 ),
	constraint221constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint221conditioninit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint221conditioninitcomp
	 ),
	constraint221conditioninitcomp : CONSTRAINT!"Equation" (
		left <- constraint221conditionexpvarref,
		right <- if (not invar.condition.oclIsUndefined()) then thisModule.makeObjectNode(invar.condition)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint221conditionexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint221variablec
	 ),
	constraint221expressionvar : CONSTRAINT!"Literal" (
		value <- '22'
	 ),
	constraint221variablec : CONSTRAINT!"Variable" (
		number <- 99
	 )
do {
 }
 }

rule ParallelismRule {
	from invar : TYPEDUCIF!"Parallelism" (thisModule.ParallelismGuard(invar))
	to Parallelismvar : TYPEDUCIF!"Parallelism" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint581targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint581varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint581varequation : CONSTRAINT!"Equation" (
		left <- constraint581rulevarref,
		right <- constraint581expressionvar
	 ),
	constraint581rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint581expressionvar : CONSTRAINT!"Literal" (
		value <- '58'
	 )
do {
 }
 }

rule ChoiceRule {
	from invar : TYPEDUCIF!"Choice" (thisModule.ChoiceGuard(invar))
	to Choicevar : TYPEDUCIF!"Choice" (
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint551targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint551varequation},
		localconstraints <- OrderedSet{},
		localvariables <- OrderedSet{}
	 ),
	constraint551varequation : CONSTRAINT!"Equation" (
		left <- constraint551rulevarref,
		right <- constraint551expressionvar
	 ),
	constraint551rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint551expressionvar : CONSTRAINT!"Literal" (
		value <- '55'
	 )
do {
 }
 }

rule IdentifierRule {
	from invar : TYPEDUCIF!"Identifier" (thisModule.IdentifierGuard(invar))
	to Identifiervar : TYPEDUCIF!"Identifier" (
		varname <- invar.varname,
		constraintvar <- invar.constraintvar,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint261targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint261varequation,constraint261variablevarequation,constraint261typevarequation},
		localconstraints <- OrderedSet{constraint261varnameinit,constraint261linksinit,constraint261constraint1,constraint261constraint2,constraint261constraint3},
		localvariables <- OrderedSet{constraint261variablen,constraint261variableenv,constraint261variablev,constraint261variablet}
	 ),
	constraint261varequation : CONSTRAINT!"Equation" (
		left <- constraint261rulevarref,
		right <- constraint261expressionvar
	 ),
	constraint261rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint261constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint261constraint1comparisonvar
	 ),
	constraint261constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint261constraint1lhs,
		right <- constraint261constraint1rhs,
		operation <- #Element
	 ),
	constraint261constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint261variablev
	 ),
	constraint261constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint261variableenv
	 ),
	constraint261constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint261constraint2comparisonvar
	 ),
	constraint261constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint261constraint2lhs,
		right <- constraint261constraint2rhs,
		operation <- #Equal
	 ),
	constraint261constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint261variablen
	 ),
	constraint261constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'name',
		expression <- constraint261constraint2rhsleft
	 ),
	constraint261constraint2rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint261variablev
	 ),
	constraint261constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint261constraint3comparisonvar
	 ),
	constraint261constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint261constraint3lhs,
		right <- constraint261constraint3rhs,
		operation <- #Equal
	 ),
	constraint261constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint261variablet
	 ),
	constraint261constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint261constraint3rhsleft
	 ),
	constraint261constraint3rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint261variablev
	 ),
	constraint261varnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint261varnameinitcomp
	 ),
	constraint261varnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint261varnameexpvarref,
		right <- if (not invar.varname.oclIsUndefined()) then thisModule.makeLiteral(invar.varname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint261varnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint261variablen
	 ),
	constraint261linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint261linksinitcomp
	 ),
	constraint261linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint261linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint261linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint261variableenv
	 ),
	constraint261expressionvar : CONSTRAINT!"Literal" (
		value <- '26'
	 ),
	constraint261variablen : CONSTRAINT!"Variable" (
		number <- 100
	 ),
	constraint261variableenv : CONSTRAINT!"Variable" (
		number <- 101
	 ),
	constraint261variablev : CONSTRAINT!"Variable" (
		number <- 102
	 ),
	constraint261variablet : CONSTRAINT!"Variable" (
		number <- 103
	 ),
	constraint261variablevarequation : CONSTRAINT!"Equation" (
		left <- constraint261variableexpvarref,
		right <- constraint261variableexpressionvar
	 ),
	constraint261variableexpvarref : CONSTRAINT!"VariableReference" (
		var <- variablevariablevar
	 ),
	constraint261variableexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint261variablev
	 ),
	constraint261typevarequation : CONSTRAINT!"Equation" (
		left <- constraint261typeexpvarref,
		right <- constraint261typeexpressionvar
	 ),
	constraint261typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint261typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint261variablet
	 ),
	constraint272targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint272varequation,constraint272constructorvarequation,constraint272typevarequation},
		localconstraints <- OrderedSet{constraint272varnameinit,constraint272linksinit,constraint272constraint1,constraint272constraint2,constraint272constraint3,constraint272constraint4},
		localvariables <- OrderedSet{constraint272variablesort,constraint272variablen,constraint272variableenv,constraint272variablec,constraint272variablet}
	 ),
	constraint272varequation : CONSTRAINT!"Equation" (
		left <- constraint272rulevarref,
		right <- constraint272expressionvar
	 ),
	constraint272rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint272constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint272constraint1comparisonvar
	 ),
	constraint272constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint272constraint1lhs,
		right <- constraint272constraint1rhs,
		operation <- #Element
	 ),
	constraint272constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint272variablesort
	 ),
	constraint272constraint1rhs : CONSTRAINT!"VariableReference" (
		var <- constraint272variableenv
	 ),
	constraint272constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint272constraint2comparisonvar
	 ),
	constraint272constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint272constraint2lhs,
		right <- constraint272constraint2rhs,
		operation <- #Element
	 ),
	constraint272constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint272variablec
	 ),
	constraint272constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'constructors',
		expression <- constraint272constraint2rhsleft
	 ),
	constraint272constraint2rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint272variablesort
	 ),
	constraint272constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint272constraint3comparisonvar
	 ),
	constraint272constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint272constraint3lhs,
		right <- constraint272constraint3rhs,
		operation <- #Equal
	 ),
	constraint272constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint272variablen
	 ),
	constraint272constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'name',
		expression <- constraint272constraint3rhsleft
	 ),
	constraint272constraint3rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint272variablec
	 ),
	constraint272constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint272constraint4comparisonvar
	 ),
	constraint272constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint272constraint4lhs,
		right <- constraint272constraint4rhs,
		operation <- #Equal
	 ),
	constraint272constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint272variablet
	 ),
	constraint272constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SortRef',
		features <- OrderedSet{constraint272constraint4rhs1}
	 ),
	constraint272constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint272constraint4rhs1sortvalue
	 ),
	constraint272constraint4rhs1sortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint272variablesort
	 ),
	constraint272varnameinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint272varnameinitcomp
	 ),
	constraint272varnameinitcomp : CONSTRAINT!"Equation" (
		left <- constraint272varnameexpvarref,
		right <- if (not invar.varname.oclIsUndefined()) then thisModule.makeLiteral(invar.varname)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint272varnameexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint272variablen
	 ),
	constraint272linksinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint272linksinitcomp
	 ),
	constraint272linksinitcomp : CONSTRAINT!"Equation" (
		left <- constraint272linksexpvarref,
		right <- if (not invar.links.oclIsUndefined()) then thisModule.makeListNode(invar.links->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint272linksexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint272variableenv
	 ),
	constraint272expressionvar : CONSTRAINT!"Literal" (
		value <- '27'
	 ),
	constraint272variablesort : CONSTRAINT!"Variable" (
		number <- 104
	 ),
	constraint272variablen : CONSTRAINT!"Variable" (
		number <- 105
	 ),
	constraint272variableenv : CONSTRAINT!"Variable" (
		number <- 106
	 ),
	constraint272variablec : CONSTRAINT!"Variable" (
		number <- 107
	 ),
	constraint272variablet : CONSTRAINT!"Variable" (
		number <- 108
	 ),
	constraint272constructorvarequation : CONSTRAINT!"Equation" (
		left <- constraint272constructorexpvarref,
		right <- constraint272constructorexpressionvar
	 ),
	constraint272constructorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constructorvariablevar
	 ),
	constraint272constructorexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint272variablec
	 ),
	constraint272typevarequation : CONSTRAINT!"Equation" (
		left <- constraint272typeexpvarref,
		right <- constraint272typeexpressionvar
	 ),
	constraint272typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint272typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint272variablet
	 )
do {
 }
 }

rule NumberRule {
	from invar : TYPEDUCIF!"Number" (thisModule.NumberGuard(invar))
	to Numbervar : TYPEDUCIF!"Number" (
		value <- invar.value,
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint231targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint231varequation,constraint231typevarequation},
		localconstraints <- OrderedSet{constraint231constraint1},
		localvariables <- OrderedSet{constraint231variablet}
	 ),
	constraint231varequation : CONSTRAINT!"Equation" (
		left <- constraint231rulevarref,
		right <- constraint231expressionvar
	 ),
	constraint231rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint231constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint231constraint1comparisonvar
	 ),
	constraint231constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint231constraint1lhs,
		right <- constraint231constraint1rhs,
		operation <- #Equal
	 ),
	constraint231constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint231variablet
	 ),
	constraint231constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Pos',
		features <- OrderedSet{constraint231constraint1rhs1}
	 ),
	constraint231constraint1rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint231constraint1rhs1sortvalue
	 ),
	constraint231constraint1rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_PosSort',
		features <- OrderedSet{}
	 ),
	constraint231expressionvar : CONSTRAINT!"Literal" (
		value <- '23'
	 ),
	constraint231variablet : CONSTRAINT!"Variable" (
		number <- 109
	 ),
	constraint231typevarequation : CONSTRAINT!"Equation" (
		left <- constraint231typeexpvarref,
		right <- constraint231typeexpressionvar
	 ),
	constraint231typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint231typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint231variablet
	 )
do {
 }
 }

rule BooleanLiteralRule {
	from invar : TYPEDUCIF!"BooleanLiteral" (thisModule.BooleanLiteralGuard(invar))
	to BooleanLiteralvar : TYPEDUCIF!"BooleanLiteral" (
		value <- invar.value,
		constraintvar <- invar.constraintvar
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint241targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint241varequation,constraint241typevarequation},
		localconstraints <- OrderedSet{constraint241constraint1},
		localvariables <- OrderedSet{constraint241variablet}
	 ),
	constraint241varequation : CONSTRAINT!"Equation" (
		left <- constraint241rulevarref,
		right <- constraint241expressionvar
	 ),
	constraint241rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint241constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint241constraint1comparisonvar
	 ),
	constraint241constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint241constraint1lhs,
		right <- constraint241constraint1rhs,
		operation <- #Equal
	 ),
	constraint241constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint241variablet
	 ),
	constraint241constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint241constraint1rhs1}
	 ),
	constraint241constraint1rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint241constraint1rhs1sortvalue
	 ),
	constraint241constraint1rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint241expressionvar : CONSTRAINT!"Literal" (
		value <- '24'
	 ),
	constraint241variablet : CONSTRAINT!"Variable" (
		number <- 110
	 ),
	constraint241typevarequation : CONSTRAINT!"Equation" (
		left <- constraint241typeexpvarref,
		right <- constraint241typeexpressionvar
	 ),
	constraint241typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint241typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint241variablet
	 )
do {
 }
 }

rule SetEnumerationRule {
	from invar : TYPEDUCIF!"SetEnumeration" (thisModule.SetEnumerationGuard(invar))
	to SetEnumerationvar : TYPEDUCIF!"SetEnumeration" (
		constraintvar <- invar.constraintvar,
		elements <- invar.elements
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint251targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint251varequation,constraint251typevarequation},
		localconstraints <- OrderedSet{constraint251elementsinit,constraint251constraint1,constraint251constraint2},
		localvariables <- OrderedSet{constraint251variablete,constraint251variablees,constraint251variablet}
	 ),
	constraint251varequation : CONSTRAINT!"Equation" (
		left <- constraint251rulevarref,
		right <- constraint251expressionvar
	 ),
	constraint251rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint251constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint251constraint1egenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint251constraint1localconstraint1}
	 ),
	constraint251constraint1egenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint251constraint1variablee},
		container <- constraint251constraint1estarget
	 ),
	constraint251constraint1estarget : CONSTRAINT!"VariableReference" (
		var <- constraint251variablees
	 ),
	constraint251constraint1variablee : CONSTRAINT!"Variable" (
		number <- 114
	 ),
	constraint251constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint251constraint1localconstraint1comparisonvar
	 ),
	constraint251constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint251constraint1localconstraint1lhs,
		right <- constraint251constraint1localconstraint1rhs,
		operation <- #GreaterEqual
	 ),
	constraint251constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint251variablete
	 ),
	constraint251constraint1localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint251constraint1localconstraint1rhsleft
	 ),
	constraint251constraint1localconstraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint251constraint1localconstraint1rhsleftleft
	 ),
	constraint251constraint1localconstraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint251constraint1variablee
	 ),
	constraint251constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint251constraint2comparisonvar
	 ),
	constraint251constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint251constraint2lhs,
		right <- constraint251constraint2rhs,
		operation <- #Equal
	 ),
	constraint251constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint251variablet
	 ),
	constraint251constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Set',
		features <- OrderedSet{constraint251constraint2rhs1}
	 ),
	constraint251constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint251constraint2rhs1sortvalue
	 ),
	constraint251constraint2rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint251constraint2rhs1sortvalue1}
	 ),
	constraint251constraint2rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint251constraint2rhs1sortvalue1elementSortvalue
	 ),
	constraint251constraint2rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint251variablete
	 ),
	constraint251elementsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint251elementsinitcomp
	 ),
	constraint251elementsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint251elementsexpvarref,
		right <- if (not invar.elements.oclIsUndefined()) then thisModule.makeListNode(invar.elements->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint251elementsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint251variablees
	 ),
	constraint251expressionvar : CONSTRAINT!"Literal" (
		value <- '25'
	 ),
	constraint251variablete : CONSTRAINT!"Variable" (
		number <- 111
	 ),
	constraint251variablees : CONSTRAINT!"Variable" (
		number <- 112
	 ),
	constraint251variablet : CONSTRAINT!"Variable" (
		number <- 113
	 ),
	constraint251typevarequation : CONSTRAINT!"Equation" (
		left <- constraint251typeexpvarref,
		right <- constraint251typeexpressionvar
	 ),
	constraint251typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint251typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint251variablet
	 )
do {
 }
 }

rule ListEnumerationRule {
	from invar : TYPEDUCIF!"ListEnumeration" (thisModule.ListEnumerationGuard(invar))
	to ListEnumerationvar : TYPEDUCIF!"ListEnumeration" (
		constraintvar <- invar.constraintvar,
		elements <- invar.elements
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint281targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint281varequation,constraint281typevarequation},
		localconstraints <- OrderedSet{constraint281elementsinit,constraint281constraint1,constraint281constraint2},
		localvariables <- OrderedSet{constraint281variablete,constraint281variablees,constraint281variablet}
	 ),
	constraint281varequation : CONSTRAINT!"Equation" (
		left <- constraint281rulevarref,
		right <- constraint281expressionvar
	 ),
	constraint281rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint281constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint281constraint1egenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint281constraint1localconstraint1}
	 ),
	constraint281constraint1egenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint281constraint1variablee},
		container <- constraint281constraint1estarget
	 ),
	constraint281constraint1estarget : CONSTRAINT!"VariableReference" (
		var <- constraint281variablees
	 ),
	constraint281constraint1variablee : CONSTRAINT!"Variable" (
		number <- 118
	 ),
	constraint281constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint281constraint1localconstraint1comparisonvar
	 ),
	constraint281constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint281constraint1localconstraint1lhs,
		right <- constraint281constraint1localconstraint1rhs,
		operation <- #GreaterEqual
	 ),
	constraint281constraint1localconstraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint281variablete
	 ),
	constraint281constraint1localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint281constraint1localconstraint1rhsleft
	 ),
	constraint281constraint1localconstraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint281constraint1localconstraint1rhsleftleft
	 ),
	constraint281constraint1localconstraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint281constraint1variablee
	 ),
	constraint281constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint281constraint2comparisonvar
	 ),
	constraint281constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint281constraint2lhs,
		right <- constraint281constraint2rhs,
		operation <- #Equal
	 ),
	constraint281constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint281variablet
	 ),
	constraint281constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_List',
		features <- OrderedSet{constraint281constraint2rhs1}
	 ),
	constraint281constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint281constraint2rhs1sortvalue
	 ),
	constraint281constraint2rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint281constraint2rhs1sortvalue1}
	 ),
	constraint281constraint2rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint281constraint2rhs1sortvalue1elementSortvalue
	 ),
	constraint281constraint2rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint281variablete
	 ),
	constraint281elementsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint281elementsinitcomp
	 ),
	constraint281elementsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint281elementsexpvarref,
		right <- if (not invar.elements.oclIsUndefined()) then thisModule.makeListNode(invar.elements->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint281elementsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint281variablees
	 ),
	constraint281expressionvar : CONSTRAINT!"Literal" (
		value <- '28'
	 ),
	constraint281variablete : CONSTRAINT!"Variable" (
		number <- 115
	 ),
	constraint281variablees : CONSTRAINT!"Variable" (
		number <- 116
	 ),
	constraint281variablet : CONSTRAINT!"Variable" (
		number <- 117
	 ),
	constraint281typevarequation : CONSTRAINT!"Equation" (
		left <- constraint281typeexpvarref,
		right <- constraint281typeexpressionvar
	 ),
	constraint281typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint281typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint281variablet
	 )
do {
 }
 }

rule BagEnumerationRule {
	from invar : TYPEDUCIF!"BagEnumeration" (thisModule.BagEnumerationGuard(invar))
	to BagEnumerationvar : TYPEDUCIF!"BagEnumeration" (
		constraintvar <- invar.constraintvar,
		elements <- invar.elements
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint291targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint291varequation,constraint291typevarequation},
		localconstraints <- OrderedSet{constraint291elementsinit,constraint291constraint1,constraint291constraint2},
		localvariables <- OrderedSet{constraint291variablete,constraint291variablees,constraint291variablet}
	 ),
	constraint291varequation : CONSTRAINT!"Equation" (
		left <- constraint291rulevarref,
		right <- constraint291expressionvar
	 ),
	constraint291rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint291constraint1 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint291constraint1egenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint291constraint1localconstraint1,constraint291constraint1localconstraint2}
	 ),
	constraint291constraint1egenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint291constraint1variablee},
		container <- constraint291constraint1estarget
	 ),
	constraint291constraint1estarget : CONSTRAINT!"VariableReference" (
		var <- constraint291variablees
	 ),
	constraint291constraint1variablee : CONSTRAINT!"Variable" (
		number <- 122
	 ),
	constraint291constraint1localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint291constraint1localconstraint1comparisonvar
	 ),
	constraint291constraint1localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint291constraint1localconstraint1lhs,
		right <- constraint291constraint1localconstraint1rhs,
		operation <- #Equal
	 ),
	constraint291constraint1localconstraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint291constraint1localconstraint1lhsleft
	 ),
	constraint291constraint1localconstraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint291constraint1localconstraint1lhsleftleft
	 ),
	constraint291constraint1localconstraint1lhsleftleft : CONSTRAINT!"IndirectReference" (
		name <- 'quantity',
		expression <- constraint291constraint1localconstraint1lhsleftleftleft
	 ),
	constraint291constraint1localconstraint1lhsleftleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint291constraint1variablee
	 ),
	constraint291constraint1localconstraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	constraint291constraint1localconstraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint291constraint1localconstraint2comparisonvar
	 ),
	constraint291constraint1localconstraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint291constraint1localconstraint2lhs,
		right <- constraint291constraint1localconstraint2rhs,
		operation <- #GreaterEqual
	 ),
	constraint291constraint1localconstraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint291variablete
	 ),
	constraint291constraint1localconstraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint291constraint1localconstraint2rhsleft
	 ),
	constraint291constraint1localconstraint2rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint291constraint1localconstraint2rhsleftleft
	 ),
	constraint291constraint1localconstraint2rhsleftleft : CONSTRAINT!"IndirectReference" (
		name <- 'element',
		expression <- constraint291constraint1localconstraint2rhsleftleftleft
	 ),
	constraint291constraint1localconstraint2rhsleftleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint291constraint1variablee
	 ),
	constraint291constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint291constraint2comparisonvar
	 ),
	constraint291constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint291constraint2lhs,
		right <- constraint291constraint2rhs,
		operation <- #Equal
	 ),
	constraint291constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint291variablet
	 ),
	constraint291constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bag',
		features <- OrderedSet{constraint291constraint2rhs1}
	 ),
	constraint291constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint291constraint2rhs1sortvalue
	 ),
	constraint291constraint2rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{constraint291constraint2rhs1sortvalue1}
	 ),
	constraint291constraint2rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint291constraint2rhs1sortvalue1elementSortvalue
	 ),
	constraint291constraint2rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint291variablete
	 ),
	constraint291elementsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint291elementsinitcomp
	 ),
	constraint291elementsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint291elementsexpvarref,
		right <- if (not invar.elements.oclIsUndefined()) then thisModule.makeListNode(invar.elements->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint291elementsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint291variablees
	 ),
	constraint291expressionvar : CONSTRAINT!"Literal" (
		value <- '29'
	 ),
	constraint291variablete : CONSTRAINT!"Variable" (
		number <- 119
	 ),
	constraint291variablees : CONSTRAINT!"Variable" (
		number <- 120
	 ),
	constraint291variablet : CONSTRAINT!"Variable" (
		number <- 121
	 ),
	constraint291typevarequation : CONSTRAINT!"Equation" (
		left <- constraint291typeexpvarref,
		right <- constraint291typeexpressionvar
	 ),
	constraint291typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint291typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint291variablet
	 )
do {
 }
 }

rule FunctionApplicationRule {
	from invar : TYPEDUCIF!"FunctionApplication" (thisModule.FunctionApplicationGuard(invar))
	to FunctionApplicationvar : TYPEDUCIF!"FunctionApplication" (
		constraintvar <- invar.constraintvar,
		base <- invar.base,
		arguments <- invar.arguments,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint491targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint491varequation,constraint491typevarequation},
		localconstraints <- OrderedSet{constraint491baseinit,constraint491argumentsinit,constraint491constraint1,constraint491constraint2,constraint491constraint3},
		localvariables <- OrderedSet{constraint491variableft,constraint491variableparams,constraint491variableb,constraint491variableargs,constraint491variablet}
	 ),
	constraint491varequation : CONSTRAINT!"Equation" (
		left <- constraint491rulevarref,
		right <- constraint491expressionvar
	 ),
	constraint491rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint491constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint491constraint1comparisonvar
	 ),
	constraint491constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint491constraint1lhs,
		right <- constraint491constraint1rhs,
		operation <- #Equal
	 ),
	constraint491constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint491variableft
	 ),
	constraint491constraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint491constraint1rhsleft
	 ),
	constraint491constraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint491variableb
	 ),
	constraint491constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint491constraint2comparisonvar
	 ),
	constraint491constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint491constraint2lhs,
		right <- constraint491constraint2rhs,
		operation <- #Equal
	 ),
	constraint491constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint491variableft
	 ),
	constraint491constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_HigherOrderSort',
		features <- OrderedSet{constraint491constraint2rhs1,constraint491constraint2rhs2}
	 ),
	constraint491constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'domain',
		value <- constraint491constraint2rhs1domainvalue
	 ),
	constraint491constraint2rhs1domainvalue : CONSTRAINT!"VariableReference" (
		var <- constraint491variableparams
	 ),
	constraint491constraint2rhs2 : CONSTRAINT!"Feature" (
		name <- 'result',
		value <- constraint491constraint2rhs2resultvalue
	 ),
	constraint491constraint2rhs2resultvalue : CONSTRAINT!"VariableReference" (
		var <- constraint491variablet
	 ),
	constraint491constraint3 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint491constraint3arggenerator,constraint491constraint3paramgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint491constraint3localconstraint1}
	 ),
	constraint491constraint3arggenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint491constraint3variablearg},
		container <- constraint491constraint3argstarget
	 ),
	constraint491constraint3argstarget : CONSTRAINT!"VariableReference" (
		var <- constraint491variableargs
	 ),
	constraint491constraint3variablearg : CONSTRAINT!"Variable" (
		number <- 128
	 ),
	constraint491constraint3paramgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint491constraint3variableparam},
		container <- constraint491constraint3paramstarget
	 ),
	constraint491constraint3paramstarget : CONSTRAINT!"VariableReference" (
		var <- constraint491variableparams
	 ),
	constraint491constraint3variableparam : CONSTRAINT!"Variable" (
		number <- 129
	 ),
	constraint491constraint3localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint491constraint3localconstraint1comparisonvar
	 ),
	constraint491constraint3localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint491constraint3localconstraint1lhs,
		right <- constraint491constraint3localconstraint1rhs,
		operation <- #LessEqual
	 ),
	constraint491constraint3localconstraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint491constraint3localconstraint1lhsleft
	 ),
	constraint491constraint3localconstraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint491constraint3localconstraint1lhsleftleft
	 ),
	constraint491constraint3localconstraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint491constraint3variablearg
	 ),
	constraint491constraint3localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint491constraint3localconstraint1rhsleft
	 ),
	constraint491constraint3localconstraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint491constraint3variableparam
	 ),
	constraint491baseinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint491baseinitcomp
	 ),
	constraint491baseinitcomp : CONSTRAINT!"Equation" (
		left <- constraint491baseexpvarref,
		right <- if (not invar.base.oclIsUndefined()) then thisModule.makeObjectNode(invar.base)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint491baseexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint491variableb
	 ),
	constraint491argumentsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint491argumentsinitcomp
	 ),
	constraint491argumentsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint491argumentsexpvarref,
		right <- if (not invar.arguments.oclIsUndefined()) then thisModule.makeListNode(invar.arguments->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint491argumentsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint491variableargs
	 ),
	constraint491expressionvar : CONSTRAINT!"Literal" (
		value <- '49'
	 ),
	constraint491variableft : CONSTRAINT!"Variable" (
		number <- 123
	 ),
	constraint491variableparams : CONSTRAINT!"Variable" (
		number <- 124
	 ),
	constraint491variableb : CONSTRAINT!"Variable" (
		number <- 125
	 ),
	constraint491variableargs : CONSTRAINT!"Variable" (
		number <- 126
	 ),
	constraint491variablet : CONSTRAINT!"Variable" (
		number <- 127
	 ),
	constraint491typevarequation : CONSTRAINT!"Equation" (
		left <- constraint491typeexpvarref,
		right <- constraint491typeexpressionvar
	 ),
	constraint491typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint491typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint491variablet
	 ),
	constraint502targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint502varequation,constraint502typevarequation},
		localconstraints <- OrderedSet{constraint502baseinit,constraint502argumentsinit,constraint502constraint1,constraint502constraint2,constraint502constraint3,constraint502constraint4},
		localvariables <- OrderedSet{constraint502variableft,constraint502variableparams,constraint502variableb,constraint502variableargs,constraint502variablet}
	 ),
	constraint502varequation : CONSTRAINT!"Equation" (
		left <- constraint502rulevarref,
		right <- constraint502expressionvar
	 ),
	constraint502rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint502constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint502constraint1comparisonvar
	 ),
	constraint502constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint502constraint1lhs,
		right <- constraint502constraint1rhs,
		operation <- #Equal
	 ),
	constraint502constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint502variableft
	 ),
	constraint502constraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'constructor',
		expression <- constraint502constraint1rhsleft
	 ),
	constraint502constraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint502variableb
	 ),
	constraint502constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint502constraint2comparisonvar
	 ),
	constraint502constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint502constraint2lhs,
		right <- constraint502constraint2rhs,
		operation <- #Equal
	 ),
	constraint502constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint502variableft
	 ),
	constraint502constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'textualmcrl2_Constructor',
		features <- OrderedSet{constraint502constraint2rhs1}
	 ),
	constraint502constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'projections',
		value <- constraint502constraint2rhs1projectionsvalue
	 ),
	constraint502constraint2rhs1projectionsvalue : CONSTRAINT!"VariableReference" (
		var <- constraint502variableparams
	 ),
	constraint502constraint3 : CONSTRAINT!"FoldConstraint" (
		name <- 'fold',
		containers <- OrderedSet{constraint502constraint3arggenerator,constraint502constraint3paramgenerator},
		localvariables <- OrderedSet{},
		localconstraints <- OrderedSet{constraint502constraint3localconstraint1}
	 ),
	constraint502constraint3arggenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint502constraint3variablearg},
		container <- constraint502constraint3argstarget
	 ),
	constraint502constraint3argstarget : CONSTRAINT!"VariableReference" (
		var <- constraint502variableargs
	 ),
	constraint502constraint3variablearg : CONSTRAINT!"Variable" (
		number <- 135
	 ),
	constraint502constraint3paramgenerator : CONSTRAINT!"Generator" (
		variables <- OrderedSet{constraint502constraint3variableparam},
		container <- constraint502constraint3paramstarget
	 ),
	constraint502constraint3paramstarget : CONSTRAINT!"VariableReference" (
		var <- constraint502variableparams
	 ),
	constraint502constraint3variableparam : CONSTRAINT!"Variable" (
		number <- 136
	 ),
	constraint502constraint3localconstraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint502constraint3localconstraint1comparisonvar
	 ),
	constraint502constraint3localconstraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint502constraint3localconstraint1lhs,
		right <- constraint502constraint3localconstraint1rhs,
		operation <- #LessEqual
	 ),
	constraint502constraint3localconstraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint502constraint3localconstraint1lhsleft
	 ),
	constraint502constraint3localconstraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint502constraint3localconstraint1lhsleftleft
	 ),
	constraint502constraint3localconstraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint502constraint3variablearg
	 ),
	constraint502constraint3localconstraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint502constraint3localconstraint1rhsleft
	 ),
	constraint502constraint3localconstraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'domain',
		expression <- constraint502constraint3localconstraint1rhsleftleft
	 ),
	constraint502constraint3localconstraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint502constraint3variableparam
	 ),
	constraint502constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint502constraint4comparisonvar
	 ),
	constraint502constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint502constraint4lhs,
		right <- constraint502constraint4rhs,
		operation <- #Equal
	 ),
	constraint502constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint502variablet
	 ),
	constraint502constraint4rhs : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint502constraint4rhsleft
	 ),
	constraint502constraint4rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint502variableb
	 ),
	constraint502baseinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint502baseinitcomp
	 ),
	constraint502baseinitcomp : CONSTRAINT!"Equation" (
		left <- constraint502baseexpvarref,
		right <- if (not invar.base.oclIsUndefined()) then thisModule.makeObjectNode(invar.base)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint502baseexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint502variableb
	 ),
	constraint502argumentsinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint502argumentsinitcomp
	 ),
	constraint502argumentsinitcomp : CONSTRAINT!"Equation" (
		left <- constraint502argumentsexpvarref,
		right <- if (not invar.arguments.oclIsUndefined()) then thisModule.makeListNode(invar.arguments->collect(o | thisModule.makeObjectNode(o)))else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint502argumentsexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint502variableargs
	 ),
	constraint502expressionvar : CONSTRAINT!"Literal" (
		value <- '50'
	 ),
	constraint502variableft : CONSTRAINT!"Variable" (
		number <- 130
	 ),
	constraint502variableparams : CONSTRAINT!"Variable" (
		number <- 131
	 ),
	constraint502variableb : CONSTRAINT!"Variable" (
		number <- 132
	 ),
	constraint502variableargs : CONSTRAINT!"Variable" (
		number <- 133
	 ),
	constraint502variablet : CONSTRAINT!"Variable" (
		number <- 134
	 ),
	constraint502typevarequation : CONSTRAINT!"Equation" (
		left <- constraint502typeexpvarref,
		right <- constraint502typeexpressionvar
	 ),
	constraint502typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint502typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint502variablet
	 )
do {
 }
 }

rule MapAccessRule {
	from invar : TYPEDUCIF!"MapAccess" (thisModule.MapAccessGuard(invar))
	to MapAccessvar : TYPEDUCIF!"MapAccess" (
		constraintvar <- invar.constraintvar,
		base <- invar.base,
		key <- invar.key,
		value <- invar.value
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint511targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint511varequation,constraint511typevarequation},
		localconstraints <- OrderedSet{constraint511baseinit,constraint511keyinit,constraint511valueinit,constraint511constraint1,constraint511constraint2,constraint511constraint3,constraint511constraint4,constraint511constraint5,constraint511constraint6},
		localvariables <- OrderedSet{constraint511variableparameterlist,constraint511variableparameter,constraint511variablevaluetype,constraint511variableb,constraint511variablek,constraint511variablev,constraint511variablet}
	 ),
	constraint511varequation : CONSTRAINT!"Equation" (
		left <- constraint511rulevarref,
		right <- constraint511expressionvar
	 ),
	constraint511rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint511constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint1comparisonvar
	 ),
	constraint511constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint1lhs,
		right <- constraint511constraint1rhs,
		operation <- #Equal
	 ),
	constraint511constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint511variablet
	 ),
	constraint511constraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint511constraint1rhsleft
	 ),
	constraint511constraint1rhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint511variableb
	 ),
	constraint511constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint2comparisonvar
	 ),
	constraint511constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint2lhs,
		right <- constraint511constraint2rhs,
		operation <- #Equal
	 ),
	constraint511constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint511constraint2lhsleft
	 ),
	constraint511constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint511constraint2lhsleftleft
	 ),
	constraint511constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint511variableb
	 ),
	constraint511constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_HigherOrderSort',
		features <- OrderedSet{constraint511constraint2rhs1,constraint511constraint2rhs2}
	 ),
	constraint511constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'domain',
		value <- constraint511constraint2rhs1domainvalue
	 ),
	constraint511constraint2rhs1domainvalue : CONSTRAINT!"VariableReference" (
		var <- constraint511variableparameterlist
	 ),
	constraint511constraint2rhs2 : CONSTRAINT!"Feature" (
		name <- 'result',
		value <- constraint511constraint2rhs2resultvalue
	 ),
	constraint511constraint2rhs2resultvalue : CONSTRAINT!"VariableReference" (
		var <- constraint511variablevaluetype
	 ),
	constraint511constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint3comparisonvar
	 ),
	constraint511constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint3lhs,
		right <- constraint511constraint3rhs,
		operation <- #Equal
	 ),
	constraint511constraint3lhs : CONSTRAINT!"UnaryNode" (
		operator <- #Length,
		left <- constraint511constraint3lhsleft
	 ),
	constraint511constraint3lhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint511variableparameterlist
	 ),
	constraint511constraint3rhs : CONSTRAINT!"Literal" (
		value <- '1'
	 ),
	constraint511constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint4comparisonvar
	 ),
	constraint511constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint4lhs,
		right <- constraint511constraint4rhs,
		operation <- #Element
	 ),
	constraint511constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint511variableparameter
	 ),
	constraint511constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint511variableparameterlist
	 ),
	constraint511constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint5comparisonvar
	 ),
	constraint511constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint5lhs,
		right <- constraint511constraint5rhs,
		operation <- #LessEqual
	 ),
	constraint511constraint5lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint511constraint5lhsleft
	 ),
	constraint511constraint5lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint511constraint5lhsleftleft
	 ),
	constraint511constraint5lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint511variablek
	 ),
	constraint511constraint5rhs : CONSTRAINT!"VariableReference" (
		var <- constraint511variableparameter
	 ),
	constraint511constraint6 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint511constraint6comparisonvar
	 ),
	constraint511constraint6comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint511constraint6lhs,
		right <- constraint511constraint6rhs,
		operation <- #LessEqual
	 ),
	constraint511constraint6lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint511constraint6lhsleft
	 ),
	constraint511constraint6lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint511constraint6lhsleftleft
	 ),
	constraint511constraint6lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint511variablev
	 ),
	constraint511constraint6rhs : CONSTRAINT!"VariableReference" (
		var <- constraint511variablevaluetype
	 ),
	constraint511baseinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint511baseinitcomp
	 ),
	constraint511baseinitcomp : CONSTRAINT!"Equation" (
		left <- constraint511baseexpvarref,
		right <- if (not invar.base.oclIsUndefined()) then thisModule.makeObjectNode(invar.base)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint511baseexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint511variableb
	 ),
	constraint511keyinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint511keyinitcomp
	 ),
	constraint511keyinitcomp : CONSTRAINT!"Equation" (
		left <- constraint511keyexpvarref,
		right <- if (not invar.key.oclIsUndefined()) then thisModule.makeObjectNode(invar.key)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint511keyexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint511variablek
	 ),
	constraint511valueinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint511valueinitcomp
	 ),
	constraint511valueinitcomp : CONSTRAINT!"Equation" (
		left <- constraint511valueexpvarref,
		right <- if (not invar.value.oclIsUndefined()) then thisModule.makeObjectNode(invar.value)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint511valueexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint511variablev
	 ),
	constraint511expressionvar : CONSTRAINT!"Literal" (
		value <- '51'
	 ),
	constraint511variableparameterlist : CONSTRAINT!"Variable" (
		number <- 137
	 ),
	constraint511variableparameter : CONSTRAINT!"Variable" (
		number <- 138
	 ),
	constraint511variablevaluetype : CONSTRAINT!"Variable" (
		number <- 139
	 ),
	constraint511variableb : CONSTRAINT!"Variable" (
		number <- 140
	 ),
	constraint511variablek : CONSTRAINT!"Variable" (
		number <- 141
	 ),
	constraint511variablev : CONSTRAINT!"Variable" (
		number <- 142
	 ),
	constraint511variablet : CONSTRAINT!"Variable" (
		number <- 143
	 ),
	constraint511typevarequation : CONSTRAINT!"Equation" (
		left <- constraint511typeexpvarref,
		right <- constraint511typeexpressionvar
	 ),
	constraint511typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint511typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint511variablet
	 )
do {
 }
 }

rule UnaryExpressionRule {
	from invar : TYPEDUCIF!"UnaryExpression" (thisModule.UnaryExpressionGuard(invar))
	to UnaryExpressionvar : TYPEDUCIF!"UnaryExpression" (
		operation <- invar.operation,
		constraintvar <- invar.constraintvar,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint301targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint301varequation,constraint301typevarequation},
		localconstraints <- OrderedSet{constraint301rightinit,constraint301operationinit,constraint301constraint1,constraint301constraint2,constraint301constraint3},
		localvariables <- OrderedSet{constraint301variablee,constraint301variableop,constraint301variablet}
	 ),
	constraint301varequation : CONSTRAINT!"Equation" (
		left <- constraint301rulevarref,
		right <- constraint301expressionvar
	 ),
	constraint301rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint301constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint301constraint1comparisonvar
	 ),
	constraint301constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint301constraint1lhs,
		right <- constraint301constraint1rhs,
		operation <- #Equal
	 ),
	constraint301constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint301variableop
	 ),
	constraint301constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Negation'
	 ),
	constraint301constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint301constraint2comparisonvar
	 ),
	constraint301constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint301constraint2lhs,
		right <- constraint301constraint2rhs,
		operation <- #Equal
	 ),
	constraint301constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint301constraint2lhsleft
	 ),
	constraint301constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint301constraint2lhsleftleft
	 ),
	constraint301constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint301variablee
	 ),
	constraint301constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint301constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint301constraint3comparisonvar
	 ),
	constraint301constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint301constraint3lhs,
		right <- constraint301constraint3rhs,
		operation <- #Equal
	 ),
	constraint301constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint301variablet
	 ),
	constraint301constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint301constraint3rhs1}
	 ),
	constraint301constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint301constraint3rhs1sortvalue
	 ),
	constraint301constraint3rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint301rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint301rightinitcomp
	 ),
	constraint301rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint301rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint301rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint301variablee
	 ),
	constraint301operationinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint301operationinitcomp
	 ),
	constraint301operationinitcomp : CONSTRAINT!"Equation" (
		left <- constraint301operationexpvarref,
		right <- if (not invar.operation.oclIsUndefined()) then thisModule.makeLiteral(invar.operation)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint301operationexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint301variableop
	 ),
	constraint301expressionvar : CONSTRAINT!"Literal" (
		value <- '30'
	 ),
	constraint301variablee : CONSTRAINT!"Variable" (
		number <- 144
	 ),
	constraint301variableop : CONSTRAINT!"Variable" (
		number <- 145
	 ),
	constraint301variablet : CONSTRAINT!"Variable" (
		number <- 146
	 ),
	constraint301typevarequation : CONSTRAINT!"Equation" (
		left <- constraint301typeexpvarref,
		right <- constraint301typeexpressionvar
	 ),
	constraint301typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint301typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint301variablet
	 ),
	constraint312targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint312varequation,constraint312typevarequation},
		localconstraints <- OrderedSet{constraint312rightinit,constraint312operationinit,constraint312constraint1,constraint312constraint2,constraint312constraint3},
		localvariables <- OrderedSet{constraint312variablee,constraint312variableop,constraint312variablet}
	 ),
	constraint312varequation : CONSTRAINT!"Equation" (
		left <- constraint312rulevarref,
		right <- constraint312expressionvar
	 ),
	constraint312rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint312constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint312constraint1comparisonvar
	 ),
	constraint312constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint312constraint1lhs,
		right <- constraint312constraint1rhs,
		operation <- #Equal
	 ),
	constraint312constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint312variableop
	 ),
	constraint312constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Minus'
	 ),
	constraint312constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint312constraint2comparisonvar
	 ),
	constraint312constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint312constraint2lhs,
		right <- constraint312constraint2rhs,
		operation <- #LessEqual
	 ),
	constraint312constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint312constraint2lhsleft
	 ),
	constraint312constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint312constraint2lhsleftleft
	 ),
	constraint312constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint312variablee
	 ),
	constraint312constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	constraint312constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint312constraint3comparisonvar
	 ),
	constraint312constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint312constraint3lhs,
		right <- constraint312constraint3rhs,
		operation <- #Equal
	 ),
	constraint312constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint312variablet
	 ),
	constraint312constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{constraint312constraint3rhs1}
	 ),
	constraint312constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint312constraint3rhs1sortvalue
	 ),
	constraint312constraint3rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	constraint312rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint312rightinitcomp
	 ),
	constraint312rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint312rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint312rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint312variablee
	 ),
	constraint312operationinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint312operationinitcomp
	 ),
	constraint312operationinitcomp : CONSTRAINT!"Equation" (
		left <- constraint312operationexpvarref,
		right <- if (not invar.operation.oclIsUndefined()) then thisModule.makeLiteral(invar.operation)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint312operationexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint312variableop
	 ),
	constraint312expressionvar : CONSTRAINT!"Literal" (
		value <- '31'
	 ),
	constraint312variablee : CONSTRAINT!"Variable" (
		number <- 147
	 ),
	constraint312variableop : CONSTRAINT!"Variable" (
		number <- 148
	 ),
	constraint312variablet : CONSTRAINT!"Variable" (
		number <- 149
	 ),
	constraint312typevarequation : CONSTRAINT!"Equation" (
		left <- constraint312typeexpvarref,
		right <- constraint312typeexpressionvar
	 ),
	constraint312typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint312typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint312variablet
	 ),
	constraint323targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint323varequation,constraint323typevarequation},
		localconstraints <- OrderedSet{constraint323rightinit,constraint323operationinit,constraint323constraint1,constraint323constraint2,constraint323constraint3},
		localvariables <- OrderedSet{constraint323variablee,constraint323variableop,constraint323variablet}
	 ),
	constraint323varequation : CONSTRAINT!"Equation" (
		left <- constraint323rulevarref,
		right <- constraint323expressionvar
	 ),
	constraint323rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint323constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint323constraint1comparisonvar
	 ),
	constraint323constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint323constraint1lhs,
		right <- constraint323constraint1rhs,
		operation <- #Equal
	 ),
	constraint323constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint323variableop
	 ),
	constraint323constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Minus'
	 ),
	constraint323constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint323constraint2comparisonvar
	 ),
	constraint323constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint323constraint2lhs,
		right <- constraint323constraint2rhs,
		operation <- #Equal
	 ),
	constraint323constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint323constraint2lhsleft
	 ),
	constraint323constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint323constraint2lhsleftleft
	 ),
	constraint323constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint323variablee
	 ),
	constraint323constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint323constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint323constraint3comparisonvar
	 ),
	constraint323constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint323constraint3lhs,
		right <- constraint323constraint3rhs,
		operation <- #Equal
	 ),
	constraint323constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint323variablet
	 ),
	constraint323constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Real',
		features <- OrderedSet{constraint323constraint3rhs1}
	 ),
	constraint323constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint323constraint3rhs1sortvalue
	 ),
	constraint323constraint3rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint323rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint323rightinitcomp
	 ),
	constraint323rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint323rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint323rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint323variablee
	 ),
	constraint323operationinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint323operationinitcomp
	 ),
	constraint323operationinitcomp : CONSTRAINT!"Equation" (
		left <- constraint323operationexpvarref,
		right <- if (not invar.operation.oclIsUndefined()) then thisModule.makeLiteral(invar.operation)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint323operationexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint323variableop
	 ),
	constraint323expressionvar : CONSTRAINT!"Literal" (
		value <- '32'
	 ),
	constraint323variablee : CONSTRAINT!"Variable" (
		number <- 150
	 ),
	constraint323variableop : CONSTRAINT!"Variable" (
		number <- 151
	 ),
	constraint323variablet : CONSTRAINT!"Variable" (
		number <- 152
	 ),
	constraint323typevarequation : CONSTRAINT!"Equation" (
		left <- constraint323typeexpvarref,
		right <- constraint323typeexpressionvar
	 ),
	constraint323typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint323typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint323variablet
	 ),
	constraint334targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint334varequation,constraint334typevarequation},
		localconstraints <- OrderedSet{constraint334rightinit,constraint334operationinit,constraint334constraint1,constraint334constraint2,constraint334constraint3},
		localvariables <- OrderedSet{constraint334variablee,constraint334variableop,constraint334variablet}
	 ),
	constraint334varequation : CONSTRAINT!"Equation" (
		left <- constraint334rulevarref,
		right <- constraint334expressionvar
	 ),
	constraint334rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint334constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint334constraint1comparisonvar
	 ),
	constraint334constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint334constraint1lhs,
		right <- constraint334constraint1rhs,
		operation <- #Equal
	 ),
	constraint334constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint334variableop
	 ),
	constraint334constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'ListSize'
	 ),
	constraint334constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint334constraint2comparisonvar
	 ),
	constraint334constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint334constraint2lhs,
		right <- constraint334constraint2rhs,
		operation <- #Equal
	 ),
	constraint334constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint334constraint2lhsleft
	 ),
	constraint334constraint2lhsleft : CONSTRAINT!"VariableReference" (
		var <- constraint334variablee
	 ),
	constraint334constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{}
	 ),
	constraint334constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint334constraint3comparisonvar
	 ),
	constraint334constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint334constraint3lhs,
		right <- constraint334constraint3rhs,
		operation <- #Equal
	 ),
	constraint334constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint334variablet
	 ),
	constraint334constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Nat',
		features <- OrderedSet{constraint334constraint3rhs1}
	 ),
	constraint334constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint334constraint3rhs1sortvalue
	 ),
	constraint334constraint3rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	constraint334rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint334rightinitcomp
	 ),
	constraint334rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint334rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint334rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint334variablee
	 ),
	constraint334operationinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint334operationinitcomp
	 ),
	constraint334operationinitcomp : CONSTRAINT!"Equation" (
		left <- constraint334operationexpvarref,
		right <- if (not invar.operation.oclIsUndefined()) then thisModule.makeLiteral(invar.operation)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint334operationexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint334variableop
	 ),
	constraint334expressionvar : CONSTRAINT!"Literal" (
		value <- '33'
	 ),
	constraint334variablee : CONSTRAINT!"Variable" (
		number <- 153
	 ),
	constraint334variableop : CONSTRAINT!"Variable" (
		number <- 154
	 ),
	constraint334variablet : CONSTRAINT!"Variable" (
		number <- 155
	 ),
	constraint334typevarequation : CONSTRAINT!"Equation" (
		left <- constraint334typeexpvarref,
		right <- constraint334typeexpressionvar
	 ),
	constraint334typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint334typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint334variablet
	 )
do {
 }
 }

rule QuantificationRule {
	from invar : TYPEDUCIF!"Quantification" (thisModule.QuantificationGuard(invar))
	to Quantificationvar : TYPEDUCIF!"Quantification" (
		forall <- invar.forall,
		constraintvar <- invar.constraintvar,
		expression <- invar.expression,
		variable <- invar.variable
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint341targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint341varequation,constraint341typevarequation},
		localconstraints <- OrderedSet{constraint341expressioninit,constraint341constraint1,constraint341constraint2},
		localvariables <- OrderedSet{constraint341variablee,constraint341variablet}
	 ),
	constraint341varequation : CONSTRAINT!"Equation" (
		left <- constraint341rulevarref,
		right <- constraint341expressionvar
	 ),
	constraint341rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint341constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint341constraint1comparisonvar
	 ),
	constraint341constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint341constraint1lhs,
		right <- constraint341constraint1rhs,
		operation <- #Equal
	 ),
	constraint341constraint1lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint341constraint1lhsleft
	 ),
	constraint341constraint1lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint341constraint1lhsleftleft
	 ),
	constraint341constraint1lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint341variablee
	 ),
	constraint341constraint1rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint341constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint341constraint2comparisonvar
	 ),
	constraint341constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint341constraint2lhs,
		right <- constraint341constraint2rhs,
		operation <- #Equal
	 ),
	constraint341constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint341variablet
	 ),
	constraint341constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint341constraint2rhs1}
	 ),
	constraint341constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint341constraint2rhs1sortvalue
	 ),
	constraint341constraint2rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint341expressioninit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint341expressioninitcomp
	 ),
	constraint341expressioninitcomp : CONSTRAINT!"Equation" (
		left <- constraint341expressionexpvarref,
		right <- if (not invar.expression.oclIsUndefined()) then thisModule.makeObjectNode(invar.expression)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint341expressionexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint341variablee
	 ),
	constraint341expressionvar : CONSTRAINT!"Literal" (
		value <- '34'
	 ),
	constraint341variablee : CONSTRAINT!"Variable" (
		number <- 156
	 ),
	constraint341variablet : CONSTRAINT!"Variable" (
		number <- 157
	 ),
	constraint341typevarequation : CONSTRAINT!"Equation" (
		left <- constraint341typeexpvarref,
		right <- constraint341typeexpressionvar
	 ),
	constraint341typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint341typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint341variablet
	 )
do {
 }
 }

rule BinaryExpressionRule {
	from invar : TYPEDUCIF!"BinaryExpression" (thisModule.BinaryExpressionGuard(invar))
	to BinaryExpressionvar : TYPEDUCIF!"BinaryExpression" (
		operator <- invar.operator,
		constraintvar <- invar.constraintvar,
		left <- invar.left,
		right <- invar.right
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint351targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint351varequation,constraint351typevarequation},
		localconstraints <- OrderedSet{constraint351rightinit,constraint351leftinit,constraint351operatorinit,constraint351constraint1,constraint351constraint2,constraint351constraint3,constraint351constraint4},
		localvariables <- OrderedSet{constraint351variablete,constraint351variabler,constraint351variablel,constraint351variableop,constraint351variablet}
	 ),
	constraint351varequation : CONSTRAINT!"Equation" (
		left <- constraint351rulevarref,
		right <- constraint351expressionvar
	 ),
	constraint351rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint351constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint351constraint1comparisonvar
	 ),
	constraint351constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint351constraint1lhs,
		right <- constraint351constraint1rhs,
		operation <- #Equal
	 ),
	constraint351constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint351variableop
	 ),
	constraint351constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Projection'
	 ),
	constraint351constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint351constraint2comparisonvar
	 ),
	constraint351constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint351constraint2lhs,
		right <- constraint351constraint2rhs,
		operation <- #Equal
	 ),
	constraint351constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint351constraint2lhsleft
	 ),
	constraint351constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint351constraint2lhsleftleft
	 ),
	constraint351constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint351variablel
	 ),
	constraint351constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint351constraint2rhs1}
	 ),
	constraint351constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint351constraint2rhs1elementSortvalue
	 ),
	constraint351constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint351variablete
	 ),
	constraint351constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint351constraint3comparisonvar
	 ),
	constraint351constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint351constraint3lhs,
		right <- constraint351constraint3rhs,
		operation <- #Equal
	 ),
	constraint351constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint351constraint3lhsleft
	 ),
	constraint351constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint351constraint3lhsleftleft
	 ),
	constraint351constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint351variabler
	 ),
	constraint351constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_NatSort',
		features <- OrderedSet{}
	 ),
	constraint351constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint351constraint4comparisonvar
	 ),
	constraint351constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint351constraint4lhs,
		right <- constraint351constraint4rhs,
		operation <- #Equal
	 ),
	constraint351constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint351variablet
	 ),
	constraint351constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SortRef',
		features <- OrderedSet{constraint351constraint4rhs1}
	 ),
	constraint351constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint351constraint4rhs1sortvalue
	 ),
	constraint351constraint4rhs1sortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint351variablete
	 ),
	constraint351rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint351rightinitcomp
	 ),
	constraint351rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint351rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint351rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint351variabler
	 ),
	constraint351leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint351leftinitcomp
	 ),
	constraint351leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint351leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint351leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint351variablel
	 ),
	constraint351operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint351operatorinitcomp
	 ),
	constraint351operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint351operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint351operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint351variableop
	 ),
	constraint351expressionvar : CONSTRAINT!"Literal" (
		value <- '35'
	 ),
	constraint351variablete : CONSTRAINT!"Variable" (
		number <- 158
	 ),
	constraint351variabler : CONSTRAINT!"Variable" (
		number <- 159
	 ),
	constraint351variablel : CONSTRAINT!"Variable" (
		number <- 160
	 ),
	constraint351variableop : CONSTRAINT!"Variable" (
		number <- 161
	 ),
	constraint351variablet : CONSTRAINT!"Variable" (
		number <- 162
	 ),
	constraint351typevarequation : CONSTRAINT!"Equation" (
		left <- constraint351typeexpvarref,
		right <- constraint351typeexpressionvar
	 ),
	constraint351typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint351typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint351variablet
	 ),
	constraint362targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint362varequation,constraint362typevarequation},
		localconstraints <- OrderedSet{constraint362rightinit,constraint362leftinit,constraint362operatorinit,constraint362constraint1,constraint362constraint2,constraint362constraint3,constraint362constraint4,constraint362constraint5},
		localvariables <- OrderedSet{constraint362variablet,constraint362variabler,constraint362variablel,constraint362variableop,constraint362variableet}
	 ),
	constraint362varequation : CONSTRAINT!"Equation" (
		left <- constraint362rulevarref,
		right <- constraint362expressionvar
	 ),
	constraint362rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint362constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint362constraint1comparisonvar
	 ),
	constraint362constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint362constraint1lhs,
		right <- constraint362constraint1rhs,
		operation <- #Element
	 ),
	constraint362constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint362variableop
	 ),
	constraint362constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint362constraint1rhs1,constraint362constraint1rhs2,constraint362constraint1rhs3}
	 ),
	constraint362constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Multiplication'
	 ),
	constraint362constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'Addition'
	 ),
	constraint362constraint1rhs3 : CONSTRAINT!"Literal" (
		value <- 'Subtraction'
	 ),
	constraint362constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint362constraint2comparisonvar
	 ),
	constraint362constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint362constraint2lhs,
		right <- constraint362constraint2rhs,
		operation <- #GreaterEqual
	 ),
	constraint362constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint362variablet
	 ),
	constraint362constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint362constraint2rhsleft
	 ),
	constraint362constraint2rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint362constraint2rhsleftleft
	 ),
	constraint362constraint2rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint362variablel
	 ),
	constraint362constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint362constraint3comparisonvar
	 ),
	constraint362constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint362constraint3lhs,
		right <- constraint362constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint362constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint362variablet
	 ),
	constraint362constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint362constraint3rhsleft
	 ),
	constraint362constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint362constraint3rhsleftleft
	 ),
	constraint362constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint362variabler
	 ),
	constraint362constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint362constraint4comparisonvar
	 ),
	constraint362constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint362constraint4lhs,
		right <- constraint362constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint362constraint4lhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint362constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint362variablet
	 ),
	constraint362constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint362constraint5comparisonvar
	 ),
	constraint362constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint362constraint5lhs,
		right <- constraint362constraint5rhs,
		operation <- #Equal
	 ),
	constraint362constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint362variableet
	 ),
	constraint362constraint5rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Real',
		features <- OrderedSet{constraint362constraint5rhs1}
	 ),
	constraint362constraint5rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint362constraint5rhs1sortvalue
	 ),
	constraint362constraint5rhs1sortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint362variablet
	 ),
	constraint362rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint362rightinitcomp
	 ),
	constraint362rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint362rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint362rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint362variabler
	 ),
	constraint362leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint362leftinitcomp
	 ),
	constraint362leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint362leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint362leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint362variablel
	 ),
	constraint362operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint362operatorinitcomp
	 ),
	constraint362operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint362operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint362operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint362variableop
	 ),
	constraint362expressionvar : CONSTRAINT!"Literal" (
		value <- '36'
	 ),
	constraint362variablet : CONSTRAINT!"Variable" (
		number <- 163
	 ),
	constraint362variabler : CONSTRAINT!"Variable" (
		number <- 164
	 ),
	constraint362variablel : CONSTRAINT!"Variable" (
		number <- 165
	 ),
	constraint362variableop : CONSTRAINT!"Variable" (
		number <- 166
	 ),
	constraint362variableet : CONSTRAINT!"Variable" (
		number <- 167
	 ),
	constraint362typevarequation : CONSTRAINT!"Equation" (
		left <- constraint362typeexpvarref,
		right <- constraint362typeexpressionvar
	 ),
	constraint362typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint362typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint362variableet
	 ),
	constraint373targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint373varequation,constraint373typevarequation},
		localconstraints <- OrderedSet{constraint373rightinit,constraint373leftinit,constraint373operatorinit,constraint373constraint1,constraint373constraint2,constraint373constraint3,constraint373constraint4,constraint373constraint5,constraint373constraint6},
		localvariables <- OrderedSet{constraint373variablete,constraint373variabletle,constraint373variabletre,constraint373variabler,constraint373variablel,constraint373variableop,constraint373variablet}
	 ),
	constraint373varequation : CONSTRAINT!"Equation" (
		left <- constraint373rulevarref,
		right <- constraint373expressionvar
	 ),
	constraint373rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint373constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint1comparisonvar
	 ),
	constraint373constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint1lhs,
		right <- constraint373constraint1rhs,
		operation <- #Element
	 ),
	constraint373constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variableop
	 ),
	constraint373constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint373constraint1rhs1,constraint373constraint1rhs2,constraint373constraint1rhs3}
	 ),
	constraint373constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Multiplication'
	 ),
	constraint373constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'Addition'
	 ),
	constraint373constraint1rhs3 : CONSTRAINT!"Literal" (
		value <- 'Subtraction'
	 ),
	constraint373constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint2comparisonvar
	 ),
	constraint373constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint2lhs,
		right <- constraint373constraint2rhs,
		operation <- #Equal
	 ),
	constraint373constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint373constraint2lhsleft
	 ),
	constraint373constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint373constraint2lhsleftleft
	 ),
	constraint373constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint373variablel
	 ),
	constraint373constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint373constraint2rhs1}
	 ),
	constraint373constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint373constraint2rhs1elementSortvalue
	 ),
	constraint373constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint373variabletle
	 ),
	constraint373constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint3comparisonvar
	 ),
	constraint373constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint3lhs,
		right <- constraint373constraint3rhs,
		operation <- #Equal
	 ),
	constraint373constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint373constraint3lhsleft
	 ),
	constraint373constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint373constraint3lhsleftleft
	 ),
	constraint373constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint373variabler
	 ),
	constraint373constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint373constraint3rhs1}
	 ),
	constraint373constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint373constraint3rhs1elementSortvalue
	 ),
	constraint373constraint3rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint373variabletre
	 ),
	constraint373constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint4comparisonvar
	 ),
	constraint373constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint4lhs,
		right <- constraint373constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint373constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variablete
	 ),
	constraint373constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variabletle
	 ),
	constraint373constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint5comparisonvar
	 ),
	constraint373constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint5lhs,
		right <- constraint373constraint5rhs,
		operation <- #GreaterEqual
	 ),
	constraint373constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variablete
	 ),
	constraint373constraint5rhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variabletre
	 ),
	constraint373constraint6 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint373constraint6comparisonvar
	 ),
	constraint373constraint6comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint373constraint6lhs,
		right <- constraint373constraint6rhs,
		operation <- #Equal
	 ),
	constraint373constraint6lhs : CONSTRAINT!"VariableReference" (
		var <- constraint373variablet
	 ),
	constraint373constraint6rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Set',
		features <- OrderedSet{constraint373constraint6rhs1}
	 ),
	constraint373constraint6rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint373constraint6rhs1sortvalue
	 ),
	constraint373constraint6rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint373constraint6rhs1sortvalue1}
	 ),
	constraint373constraint6rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint373constraint6rhs1sortvalue1elementSortvalue
	 ),
	constraint373constraint6rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint373variablete
	 ),
	constraint373rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint373rightinitcomp
	 ),
	constraint373rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint373rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint373rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint373variabler
	 ),
	constraint373leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint373leftinitcomp
	 ),
	constraint373leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint373leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint373leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint373variablel
	 ),
	constraint373operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint373operatorinitcomp
	 ),
	constraint373operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint373operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint373operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint373variableop
	 ),
	constraint373expressionvar : CONSTRAINT!"Literal" (
		value <- '37'
	 ),
	constraint373variablete : CONSTRAINT!"Variable" (
		number <- 168
	 ),
	constraint373variabletle : CONSTRAINT!"Variable" (
		number <- 169
	 ),
	constraint373variabletre : CONSTRAINT!"Variable" (
		number <- 170
	 ),
	constraint373variabler : CONSTRAINT!"Variable" (
		number <- 171
	 ),
	constraint373variablel : CONSTRAINT!"Variable" (
		number <- 172
	 ),
	constraint373variableop : CONSTRAINT!"Variable" (
		number <- 173
	 ),
	constraint373variablet : CONSTRAINT!"Variable" (
		number <- 174
	 ),
	constraint373typevarequation : CONSTRAINT!"Equation" (
		left <- constraint373typeexpvarref,
		right <- constraint373typeexpressionvar
	 ),
	constraint373typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint373typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint373variablet
	 ),
	constraint384targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint384varequation,constraint384typevarequation},
		localconstraints <- OrderedSet{constraint384rightinit,constraint384leftinit,constraint384operatorinit,constraint384constraint1,constraint384constraint2,constraint384constraint3,constraint384constraint4,constraint384constraint5},
		localvariables <- OrderedSet{constraint384variablettemp,constraint384variabler,constraint384variablel,constraint384variableop,constraint384variablet}
	 ),
	constraint384varequation : CONSTRAINT!"Equation" (
		left <- constraint384rulevarref,
		right <- constraint384expressionvar
	 ),
	constraint384rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint384constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint384constraint1comparisonvar
	 ),
	constraint384constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint384constraint1lhs,
		right <- constraint384constraint1rhs,
		operation <- #Element
	 ),
	constraint384constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint384variableop
	 ),
	constraint384constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint384constraint1rhs1,constraint384constraint1rhs2}
	 ),
	constraint384constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Modulo'
	 ),
	constraint384constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'Division'
	 ),
	constraint384constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint384constraint2comparisonvar
	 ),
	constraint384constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint384constraint2lhs,
		right <- constraint384constraint2rhs,
		operation <- #GreaterEqual
	 ),
	constraint384constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint384variablettemp
	 ),
	constraint384constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint384constraint2rhsleft
	 ),
	constraint384constraint2rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint384constraint2rhsleftleft
	 ),
	constraint384constraint2rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint384variablel
	 ),
	constraint384constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint384constraint3comparisonvar
	 ),
	constraint384constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint384constraint3lhs,
		right <- constraint384constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint384constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint384variablettemp
	 ),
	constraint384constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint384constraint3rhsleft
	 ),
	constraint384constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint384constraint3rhsleftleft
	 ),
	constraint384constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint384variabler
	 ),
	constraint384constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint384constraint4comparisonvar
	 ),
	constraint384constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint384constraint4lhs,
		right <- constraint384constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint384constraint4lhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_IntSort',
		features <- OrderedSet{}
	 ),
	constraint384constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint384variablettemp
	 ),
	constraint384constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint384constraint5comparisonvar
	 ),
	constraint384constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint384constraint5lhs,
		right <- constraint384constraint5rhs,
		operation <- #Equal
	 ),
	constraint384constraint5lhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Int',
		features <- OrderedSet{constraint384constraint5lhs1}
	 ),
	constraint384constraint5lhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint384constraint5lhs1sortvalue
	 ),
	constraint384constraint5lhs1sortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint384variablettemp
	 ),
	constraint384constraint5rhs : CONSTRAINT!"VariableReference" (
		var <- constraint384variablet
	 ),
	constraint384rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint384rightinitcomp
	 ),
	constraint384rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint384rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint384rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint384variabler
	 ),
	constraint384leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint384leftinitcomp
	 ),
	constraint384leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint384leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint384leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint384variablel
	 ),
	constraint384operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint384operatorinitcomp
	 ),
	constraint384operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint384operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint384operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint384variableop
	 ),
	constraint384expressionvar : CONSTRAINT!"Literal" (
		value <- '38'
	 ),
	constraint384variablettemp : CONSTRAINT!"Variable" (
		number <- 175
	 ),
	constraint384variabler : CONSTRAINT!"Variable" (
		number <- 176
	 ),
	constraint384variablel : CONSTRAINT!"Variable" (
		number <- 177
	 ),
	constraint384variableop : CONSTRAINT!"Variable" (
		number <- 178
	 ),
	constraint384variablet : CONSTRAINT!"Variable" (
		number <- 179
	 ),
	constraint384typevarequation : CONSTRAINT!"Equation" (
		left <- constraint384typeexpvarref,
		right <- constraint384typeexpressionvar
	 ),
	constraint384typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint384typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint384variablet
	 ),
	constraint395targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint395varequation,constraint395typevarequation},
		localconstraints <- OrderedSet{constraint395rightinit,constraint395leftinit,constraint395operatorinit,constraint395constraint1,constraint395constraint2,constraint395constraint3,constraint395constraint4},
		localvariables <- OrderedSet{constraint395variabler,constraint395variablel,constraint395variableop,constraint395variablet}
	 ),
	constraint395varequation : CONSTRAINT!"Equation" (
		left <- constraint395rulevarref,
		right <- constraint395expressionvar
	 ),
	constraint395rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint395constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint395constraint1comparisonvar
	 ),
	constraint395constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint395constraint1lhs,
		right <- constraint395constraint1rhs,
		operation <- #Element
	 ),
	constraint395constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint395variableop
	 ),
	constraint395constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint395constraint1rhs1,constraint395constraint1rhs2,constraint395constraint1rhs3,constraint395constraint1rhs4}
	 ),
	constraint395constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'LessThan'
	 ),
	constraint395constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'GreaterThan'
	 ),
	constraint395constraint1rhs3 : CONSTRAINT!"Literal" (
		value <- 'LessEqual'
	 ),
	constraint395constraint1rhs4 : CONSTRAINT!"Literal" (
		value <- 'GreaterEqual'
	 ),
	constraint395constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint395constraint2comparisonvar
	 ),
	constraint395constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint395constraint2lhs,
		right <- constraint395constraint2rhs,
		operation <- #GreaterEqual
	 ),
	constraint395constraint2lhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint395constraint2rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint395constraint2rhsleft
	 ),
	constraint395constraint2rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint395constraint2rhsleftleft
	 ),
	constraint395constraint2rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint395variablel
	 ),
	constraint395constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint395constraint3comparisonvar
	 ),
	constraint395constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint395constraint3lhs,
		right <- constraint395constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint395constraint3lhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_RealSort',
		features <- OrderedSet{}
	 ),
	constraint395constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint395constraint3rhsleft
	 ),
	constraint395constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint395constraint3rhsleftleft
	 ),
	constraint395constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint395variabler
	 ),
	constraint395constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint395constraint4comparisonvar
	 ),
	constraint395constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint395constraint4lhs,
		right <- constraint395constraint4rhs,
		operation <- #Equal
	 ),
	constraint395constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint395variablet
	 ),
	constraint395constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint395constraint4rhs1}
	 ),
	constraint395constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint395constraint4rhs1sortvalue
	 ),
	constraint395constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint395rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint395rightinitcomp
	 ),
	constraint395rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint395rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint395rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint395variabler
	 ),
	constraint395leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint395leftinitcomp
	 ),
	constraint395leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint395leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint395leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint395variablel
	 ),
	constraint395operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint395operatorinitcomp
	 ),
	constraint395operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint395operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint395operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint395variableop
	 ),
	constraint395expressionvar : CONSTRAINT!"Literal" (
		value <- '39'
	 ),
	constraint395variabler : CONSTRAINT!"Variable" (
		number <- 180
	 ),
	constraint395variablel : CONSTRAINT!"Variable" (
		number <- 181
	 ),
	constraint395variableop : CONSTRAINT!"Variable" (
		number <- 182
	 ),
	constraint395variablet : CONSTRAINT!"Variable" (
		number <- 183
	 ),
	constraint395typevarequation : CONSTRAINT!"Equation" (
		left <- constraint395typeexpvarref,
		right <- constraint395typeexpressionvar
	 ),
	constraint395typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint395typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint395variablet
	 ),
	constraint406targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint406varequation,constraint406typevarequation},
		localconstraints <- OrderedSet{constraint406rightinit,constraint406leftinit,constraint406operatorinit,constraint406constraint1,constraint406constraint2,constraint406constraint3,constraint406constraint4,constraint406constraint5,constraint406constraint6},
		localvariables <- OrderedSet{constraint406variablete,constraint406variabletle,constraint406variabletre,constraint406variabler,constraint406variablel,constraint406variableop,constraint406variablet}
	 ),
	constraint406varequation : CONSTRAINT!"Equation" (
		left <- constraint406rulevarref,
		right <- constraint406expressionvar
	 ),
	constraint406rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint406constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint1comparisonvar
	 ),
	constraint406constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint1lhs,
		right <- constraint406constraint1rhs,
		operation <- #Element
	 ),
	constraint406constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variableop
	 ),
	constraint406constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint406constraint1rhs1,constraint406constraint1rhs2,constraint406constraint1rhs3,constraint406constraint1rhs4}
	 ),
	constraint406constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'LessThan'
	 ),
	constraint406constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'GreaterThan'
	 ),
	constraint406constraint1rhs3 : CONSTRAINT!"Literal" (
		value <- 'LessEqual'
	 ),
	constraint406constraint1rhs4 : CONSTRAINT!"Literal" (
		value <- 'GreaterEqual'
	 ),
	constraint406constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint2comparisonvar
	 ),
	constraint406constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint2lhs,
		right <- constraint406constraint2rhs,
		operation <- #Equal
	 ),
	constraint406constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint406constraint2lhsleft
	 ),
	constraint406constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint406constraint2lhsleftleft
	 ),
	constraint406constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint406variablel
	 ),
	constraint406constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint406constraint2rhs1}
	 ),
	constraint406constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint406constraint2rhs1elementSortvalue
	 ),
	constraint406constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint406variabletle
	 ),
	constraint406constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint3comparisonvar
	 ),
	constraint406constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint3lhs,
		right <- constraint406constraint3rhs,
		operation <- #Equal
	 ),
	constraint406constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint406constraint3lhsleft
	 ),
	constraint406constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint406constraint3lhsleftleft
	 ),
	constraint406constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint406variabler
	 ),
	constraint406constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint406constraint3rhs1}
	 ),
	constraint406constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint406constraint3rhs1elementSortvalue
	 ),
	constraint406constraint3rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint406variabletre
	 ),
	constraint406constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint4comparisonvar
	 ),
	constraint406constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint4lhs,
		right <- constraint406constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint406constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variablete
	 ),
	constraint406constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variabletle
	 ),
	constraint406constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint5comparisonvar
	 ),
	constraint406constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint5lhs,
		right <- constraint406constraint5rhs,
		operation <- #GreaterEqual
	 ),
	constraint406constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variablete
	 ),
	constraint406constraint5rhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variabletre
	 ),
	constraint406constraint6 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint406constraint6comparisonvar
	 ),
	constraint406constraint6comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint406constraint6lhs,
		right <- constraint406constraint6rhs,
		operation <- #Equal
	 ),
	constraint406constraint6lhs : CONSTRAINT!"VariableReference" (
		var <- constraint406variablet
	 ),
	constraint406constraint6rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint406constraint6rhs1}
	 ),
	constraint406constraint6rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint406constraint6rhs1sortvalue
	 ),
	constraint406constraint6rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint406rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint406rightinitcomp
	 ),
	constraint406rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint406rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint406rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint406variabler
	 ),
	constraint406leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint406leftinitcomp
	 ),
	constraint406leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint406leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint406leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint406variablel
	 ),
	constraint406operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint406operatorinitcomp
	 ),
	constraint406operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint406operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint406operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint406variableop
	 ),
	constraint406expressionvar : CONSTRAINT!"Literal" (
		value <- '40'
	 ),
	constraint406variablete : CONSTRAINT!"Variable" (
		number <- 184
	 ),
	constraint406variabletle : CONSTRAINT!"Variable" (
		number <- 185
	 ),
	constraint406variabletre : CONSTRAINT!"Variable" (
		number <- 186
	 ),
	constraint406variabler : CONSTRAINT!"Variable" (
		number <- 187
	 ),
	constraint406variablel : CONSTRAINT!"Variable" (
		number <- 188
	 ),
	constraint406variableop : CONSTRAINT!"Variable" (
		number <- 189
	 ),
	constraint406variablet : CONSTRAINT!"Variable" (
		number <- 190
	 ),
	constraint406typevarequation : CONSTRAINT!"Equation" (
		left <- constraint406typeexpvarref,
		right <- constraint406typeexpressionvar
	 ),
	constraint406typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint406typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint406variablet
	 ),
	constraint417targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint417varequation,constraint417typevarequation},
		localconstraints <- OrderedSet{constraint417rightinit,constraint417leftinit,constraint417operatorinit,constraint417constraint1,constraint417constraint2,constraint417constraint3,constraint417constraint4},
		localvariables <- OrderedSet{constraint417variablete,constraint417variabler,constraint417variablel,constraint417variableop,constraint417variablet}
	 ),
	constraint417varequation : CONSTRAINT!"Equation" (
		left <- constraint417rulevarref,
		right <- constraint417expressionvar
	 ),
	constraint417rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint417constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint417constraint1comparisonvar
	 ),
	constraint417constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint417constraint1lhs,
		right <- constraint417constraint1rhs,
		operation <- #Equal
	 ),
	constraint417constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint417variableop
	 ),
	constraint417constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Element'
	 ),
	constraint417constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint417constraint2comparisonvar
	 ),
	constraint417constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint417constraint2lhs,
		right <- constraint417constraint2rhs,
		operation <- #Equal
	 ),
	constraint417constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint417constraint2lhsleft
	 ),
	constraint417constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint417constraint2lhsleftleft
	 ),
	constraint417constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint417variablel
	 ),
	constraint417constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_SetSort',
		features <- OrderedSet{constraint417constraint2rhs1}
	 ),
	constraint417constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint417constraint2rhs1elementSortvalue
	 ),
	constraint417constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint417variablete
	 ),
	constraint417constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint417constraint3comparisonvar
	 ),
	constraint417constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint417constraint3lhs,
		right <- constraint417constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint417constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint417variablete
	 ),
	constraint417constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint417constraint3rhsleft
	 ),
	constraint417constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint417constraint3rhsleftleft
	 ),
	constraint417constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint417variabler
	 ),
	constraint417constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint417constraint4comparisonvar
	 ),
	constraint417constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint417constraint4lhs,
		right <- constraint417constraint4rhs,
		operation <- #Equal
	 ),
	constraint417constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint417variablet
	 ),
	constraint417constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint417constraint4rhs1}
	 ),
	constraint417constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint417constraint4rhs1sortvalue
	 ),
	constraint417constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint417rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint417rightinitcomp
	 ),
	constraint417rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint417rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint417rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint417variabler
	 ),
	constraint417leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint417leftinitcomp
	 ),
	constraint417leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint417leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint417leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint417variablel
	 ),
	constraint417operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint417operatorinitcomp
	 ),
	constraint417operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint417operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint417operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint417variableop
	 ),
	constraint417expressionvar : CONSTRAINT!"Literal" (
		value <- '41'
	 ),
	constraint417variablete : CONSTRAINT!"Variable" (
		number <- 191
	 ),
	constraint417variabler : CONSTRAINT!"Variable" (
		number <- 192
	 ),
	constraint417variablel : CONSTRAINT!"Variable" (
		number <- 193
	 ),
	constraint417variableop : CONSTRAINT!"Variable" (
		number <- 194
	 ),
	constraint417variablet : CONSTRAINT!"Variable" (
		number <- 195
	 ),
	constraint417typevarequation : CONSTRAINT!"Equation" (
		left <- constraint417typeexpvarref,
		right <- constraint417typeexpressionvar
	 ),
	constraint417typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint417typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint417variablet
	 ),
	constraint428targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint428varequation,constraint428typevarequation},
		localconstraints <- OrderedSet{constraint428rightinit,constraint428leftinit,constraint428operatorinit,constraint428constraint1,constraint428constraint2,constraint428constraint3,constraint428constraint4},
		localvariables <- OrderedSet{constraint428variablete,constraint428variabler,constraint428variablel,constraint428variableop,constraint428variablet}
	 ),
	constraint428varequation : CONSTRAINT!"Equation" (
		left <- constraint428rulevarref,
		right <- constraint428expressionvar
	 ),
	constraint428rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint428constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint428constraint1comparisonvar
	 ),
	constraint428constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint428constraint1lhs,
		right <- constraint428constraint1rhs,
		operation <- #Equal
	 ),
	constraint428constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint428variableop
	 ),
	constraint428constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Element'
	 ),
	constraint428constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint428constraint2comparisonvar
	 ),
	constraint428constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint428constraint2lhs,
		right <- constraint428constraint2rhs,
		operation <- #Equal
	 ),
	constraint428constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint428constraint2lhsleft
	 ),
	constraint428constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint428constraint2lhsleftleft
	 ),
	constraint428constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint428variablel
	 ),
	constraint428constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint428constraint2rhs1}
	 ),
	constraint428constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint428constraint2rhs1elementSortvalue
	 ),
	constraint428constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint428variablete
	 ),
	constraint428constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint428constraint3comparisonvar
	 ),
	constraint428constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint428constraint3lhs,
		right <- constraint428constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint428constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint428variablete
	 ),
	constraint428constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint428constraint3rhsleft
	 ),
	constraint428constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint428constraint3rhsleftleft
	 ),
	constraint428constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint428variabler
	 ),
	constraint428constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint428constraint4comparisonvar
	 ),
	constraint428constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint428constraint4lhs,
		right <- constraint428constraint4rhs,
		operation <- #Equal
	 ),
	constraint428constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint428variablet
	 ),
	constraint428constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint428constraint4rhs1}
	 ),
	constraint428constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint428constraint4rhs1sortvalue
	 ),
	constraint428constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint428rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint428rightinitcomp
	 ),
	constraint428rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint428rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint428rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint428variabler
	 ),
	constraint428leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint428leftinitcomp
	 ),
	constraint428leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint428leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint428leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint428variablel
	 ),
	constraint428operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint428operatorinitcomp
	 ),
	constraint428operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint428operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint428operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint428variableop
	 ),
	constraint428expressionvar : CONSTRAINT!"Literal" (
		value <- '42'
	 ),
	constraint428variablete : CONSTRAINT!"Variable" (
		number <- 196
	 ),
	constraint428variabler : CONSTRAINT!"Variable" (
		number <- 197
	 ),
	constraint428variablel : CONSTRAINT!"Variable" (
		number <- 198
	 ),
	constraint428variableop : CONSTRAINT!"Variable" (
		number <- 199
	 ),
	constraint428variablet : CONSTRAINT!"Variable" (
		number <- 200
	 ),
	constraint428typevarequation : CONSTRAINT!"Equation" (
		left <- constraint428typeexpvarref,
		right <- constraint428typeexpressionvar
	 ),
	constraint428typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint428typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint428variablet
	 ),
	constraint439targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint439varequation,constraint439typevarequation},
		localconstraints <- OrderedSet{constraint439rightinit,constraint439leftinit,constraint439operatorinit,constraint439constraint1,constraint439constraint2,constraint439constraint3,constraint439constraint4},
		localvariables <- OrderedSet{constraint439variablete,constraint439variabler,constraint439variablel,constraint439variableop,constraint439variablet}
	 ),
	constraint439varequation : CONSTRAINT!"Equation" (
		left <- constraint439rulevarref,
		right <- constraint439expressionvar
	 ),
	constraint439rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint439constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint439constraint1comparisonvar
	 ),
	constraint439constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint439constraint1lhs,
		right <- constraint439constraint1rhs,
		operation <- #Equal
	 ),
	constraint439constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint439variableop
	 ),
	constraint439constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Element'
	 ),
	constraint439constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint439constraint2comparisonvar
	 ),
	constraint439constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint439constraint2lhs,
		right <- constraint439constraint2rhs,
		operation <- #Equal
	 ),
	constraint439constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint439constraint2lhsleft
	 ),
	constraint439constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint439constraint2lhsleftleft
	 ),
	constraint439constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint439variablel
	 ),
	constraint439constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BagSort',
		features <- OrderedSet{constraint439constraint2rhs1}
	 ),
	constraint439constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint439constraint2rhs1elementSortvalue
	 ),
	constraint439constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint439variablete
	 ),
	constraint439constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint439constraint3comparisonvar
	 ),
	constraint439constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint439constraint3lhs,
		right <- constraint439constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint439constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint439variablete
	 ),
	constraint439constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint439constraint3rhsleft
	 ),
	constraint439constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint439constraint3rhsleftleft
	 ),
	constraint439constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint439variabler
	 ),
	constraint439constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint439constraint4comparisonvar
	 ),
	constraint439constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint439constraint4lhs,
		right <- constraint439constraint4rhs,
		operation <- #Equal
	 ),
	constraint439constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint439variablet
	 ),
	constraint439constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint439constraint4rhs1}
	 ),
	constraint439constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint439constraint4rhs1sortvalue
	 ),
	constraint439constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint439rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint439rightinitcomp
	 ),
	constraint439rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint439rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint439rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint439variabler
	 ),
	constraint439leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint439leftinitcomp
	 ),
	constraint439leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint439leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint439leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint439variablel
	 ),
	constraint439operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint439operatorinitcomp
	 ),
	constraint439operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint439operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint439operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint439variableop
	 ),
	constraint439expressionvar : CONSTRAINT!"Literal" (
		value <- '43'
	 ),
	constraint439variablete : CONSTRAINT!"Variable" (
		number <- 201
	 ),
	constraint439variabler : CONSTRAINT!"Variable" (
		number <- 202
	 ),
	constraint439variablel : CONSTRAINT!"Variable" (
		number <- 203
	 ),
	constraint439variableop : CONSTRAINT!"Variable" (
		number <- 204
	 ),
	constraint439variablet : CONSTRAINT!"Variable" (
		number <- 205
	 ),
	constraint439typevarequation : CONSTRAINT!"Equation" (
		left <- constraint439typeexpvarref,
		right <- constraint439typeexpressionvar
	 ),
	constraint439typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint439typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint439variablet
	 ),
	constraint4410targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint4410varequation,constraint4410typevarequation},
		localconstraints <- OrderedSet{constraint4410rightinit,constraint4410leftinit,constraint4410operatorinit,constraint4410constraint1,constraint4410constraint2,constraint4410constraint3,constraint4410constraint4,constraint4410constraint5},
		localvariables <- OrderedSet{constraint4410variablete,constraint4410variabletre,constraint4410variabler,constraint4410variablel,constraint4410variableop,constraint4410variablet}
	 ),
	constraint4410varequation : CONSTRAINT!"Equation" (
		left <- constraint4410rulevarref,
		right <- constraint4410expressionvar
	 ),
	constraint4410rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint4410constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4410constraint1comparisonvar
	 ),
	constraint4410constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4410constraint1lhs,
		right <- constraint4410constraint1rhs,
		operation <- #Equal
	 ),
	constraint4410constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4410variableop
	 ),
	constraint4410constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Cons'
	 ),
	constraint4410constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4410constraint2comparisonvar
	 ),
	constraint4410constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4410constraint2lhs,
		right <- constraint4410constraint2rhs,
		operation <- #Equal
	 ),
	constraint4410constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4410constraint2lhsleft
	 ),
	constraint4410constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4410constraint2lhsleftleft
	 ),
	constraint4410constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4410variabler
	 ),
	constraint4410constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4410constraint2rhs1}
	 ),
	constraint4410constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4410constraint2rhs1elementSortvalue
	 ),
	constraint4410constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4410variabletre
	 ),
	constraint4410constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4410constraint3comparisonvar
	 ),
	constraint4410constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4410constraint3lhs,
		right <- constraint4410constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint4410constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablete
	 ),
	constraint4410constraint3rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4410variabletre
	 ),
	constraint4410constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4410constraint4comparisonvar
	 ),
	constraint4410constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4410constraint4lhs,
		right <- constraint4410constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint4410constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablete
	 ),
	constraint4410constraint4rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4410constraint4rhsleft
	 ),
	constraint4410constraint4rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4410constraint4rhsleftleft
	 ),
	constraint4410constraint4rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablel
	 ),
	constraint4410constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4410constraint5comparisonvar
	 ),
	constraint4410constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4410constraint5lhs,
		right <- constraint4410constraint5rhs,
		operation <- #Equal
	 ),
	constraint4410constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablet
	 ),
	constraint4410constraint5rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_List',
		features <- OrderedSet{constraint4410constraint5rhs1}
	 ),
	constraint4410constraint5rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint4410constraint5rhs1sortvalue
	 ),
	constraint4410constraint5rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4410constraint5rhs1sortvalue1}
	 ),
	constraint4410constraint5rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4410constraint5rhs1sortvalue1elementSortvalue
	 ),
	constraint4410constraint5rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablete
	 ),
	constraint4410rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4410rightinitcomp
	 ),
	constraint4410rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4410rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4410rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4410variabler
	 ),
	constraint4410leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4410leftinitcomp
	 ),
	constraint4410leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4410leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4410leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablel
	 ),
	constraint4410operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4410operatorinitcomp
	 ),
	constraint4410operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4410operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4410operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4410variableop
	 ),
	constraint4410expressionvar : CONSTRAINT!"Literal" (
		value <- '44'
	 ),
	constraint4410variablete : CONSTRAINT!"Variable" (
		number <- 206
	 ),
	constraint4410variabletre : CONSTRAINT!"Variable" (
		number <- 207
	 ),
	constraint4410variabler : CONSTRAINT!"Variable" (
		number <- 208
	 ),
	constraint4410variablel : CONSTRAINT!"Variable" (
		number <- 209
	 ),
	constraint4410variableop : CONSTRAINT!"Variable" (
		number <- 210
	 ),
	constraint4410variablet : CONSTRAINT!"Variable" (
		number <- 211
	 ),
	constraint4410typevarequation : CONSTRAINT!"Equation" (
		left <- constraint4410typeexpvarref,
		right <- constraint4410typeexpressionvar
	 ),
	constraint4410typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint4410typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint4410variablet
	 ),
	constraint4511targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint4511varequation,constraint4511typevarequation},
		localconstraints <- OrderedSet{constraint4511rightinit,constraint4511leftinit,constraint4511operatorinit,constraint4511constraint1,constraint4511constraint2,constraint4511constraint3,constraint4511constraint4,constraint4511constraint5},
		localvariables <- OrderedSet{constraint4511variablete,constraint4511variabletle,constraint4511variabler,constraint4511variablel,constraint4511variableop,constraint4511variablet}
	 ),
	constraint4511varequation : CONSTRAINT!"Equation" (
		left <- constraint4511rulevarref,
		right <- constraint4511expressionvar
	 ),
	constraint4511rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint4511constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4511constraint1comparisonvar
	 ),
	constraint4511constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4511constraint1lhs,
		right <- constraint4511constraint1rhs,
		operation <- #Equal
	 ),
	constraint4511constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4511variableop
	 ),
	constraint4511constraint1rhs : CONSTRAINT!"Literal" (
		value <- 'Snoc'
	 ),
	constraint4511constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4511constraint2comparisonvar
	 ),
	constraint4511constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4511constraint2lhs,
		right <- constraint4511constraint2rhs,
		operation <- #Equal
	 ),
	constraint4511constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4511constraint2lhsleft
	 ),
	constraint4511constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4511constraint2lhsleftleft
	 ),
	constraint4511constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablel
	 ),
	constraint4511constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4511constraint2rhs1}
	 ),
	constraint4511constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4511constraint2rhs1elementSortvalue
	 ),
	constraint4511constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4511variabletle
	 ),
	constraint4511constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4511constraint3comparisonvar
	 ),
	constraint4511constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4511constraint3lhs,
		right <- constraint4511constraint3rhs,
		operation <- #GreaterEqual
	 ),
	constraint4511constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablete
	 ),
	constraint4511constraint3rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4511variabletle
	 ),
	constraint4511constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4511constraint4comparisonvar
	 ),
	constraint4511constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4511constraint4lhs,
		right <- constraint4511constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint4511constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablete
	 ),
	constraint4511constraint4rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4511constraint4rhsleft
	 ),
	constraint4511constraint4rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4511constraint4rhsleftleft
	 ),
	constraint4511constraint4rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4511variabler
	 ),
	constraint4511constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4511constraint5comparisonvar
	 ),
	constraint4511constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4511constraint5lhs,
		right <- constraint4511constraint5rhs,
		operation <- #Equal
	 ),
	constraint4511constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablet
	 ),
	constraint4511constraint5rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_List',
		features <- OrderedSet{constraint4511constraint5rhs1}
	 ),
	constraint4511constraint5rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint4511constraint5rhs1sortvalue
	 ),
	constraint4511constraint5rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4511constraint5rhs1sortvalue1}
	 ),
	constraint4511constraint5rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4511constraint5rhs1sortvalue1elementSortvalue
	 ),
	constraint4511constraint5rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablete
	 ),
	constraint4511rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4511rightinitcomp
	 ),
	constraint4511rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4511rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4511rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4511variabler
	 ),
	constraint4511leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4511leftinitcomp
	 ),
	constraint4511leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4511leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4511leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablel
	 ),
	constraint4511operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4511operatorinitcomp
	 ),
	constraint4511operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4511operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4511operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4511variableop
	 ),
	constraint4511expressionvar : CONSTRAINT!"Literal" (
		value <- '45'
	 ),
	constraint4511variablete : CONSTRAINT!"Variable" (
		number <- 212
	 ),
	constraint4511variabletle : CONSTRAINT!"Variable" (
		number <- 213
	 ),
	constraint4511variabler : CONSTRAINT!"Variable" (
		number <- 214
	 ),
	constraint4511variablel : CONSTRAINT!"Variable" (
		number <- 215
	 ),
	constraint4511variableop : CONSTRAINT!"Variable" (
		number <- 216
	 ),
	constraint4511variablet : CONSTRAINT!"Variable" (
		number <- 217
	 ),
	constraint4511typevarequation : CONSTRAINT!"Equation" (
		left <- constraint4511typeexpvarref,
		right <- constraint4511typeexpressionvar
	 ),
	constraint4511typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint4511typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint4511variablet
	 ),
	constraint4612targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint4612varequation,constraint4612typevarequation},
		localconstraints <- OrderedSet{constraint4612rightinit,constraint4612leftinit,constraint4612operatorinit,constraint4612constraint1,constraint4612constraint2,constraint4612constraint3,constraint4612constraint4,constraint4612constraint5,constraint4612constraint6},
		localvariables <- OrderedSet{constraint4612variablete,constraint4612variabletle,constraint4612variabletre,constraint4612variabler,constraint4612variablel,constraint4612variableop,constraint4612variablet}
	 ),
	constraint4612varequation : CONSTRAINT!"Equation" (
		left <- constraint4612rulevarref,
		right <- constraint4612expressionvar
	 ),
	constraint4612rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint4612constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint1comparisonvar
	 ),
	constraint4612constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint1lhs,
		right <- constraint4612constraint1rhs,
		operation <- #Element
	 ),
	constraint4612constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variableop
	 ),
	constraint4612constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint4612constraint1rhs1}
	 ),
	constraint4612constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Concat'
	 ),
	constraint4612constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint2comparisonvar
	 ),
	constraint4612constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint2lhs,
		right <- constraint4612constraint2rhs,
		operation <- #Equal
	 ),
	constraint4612constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4612constraint2lhsleft
	 ),
	constraint4612constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4612constraint2lhsleftleft
	 ),
	constraint4612constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablel
	 ),
	constraint4612constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4612constraint2rhs1}
	 ),
	constraint4612constraint2rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4612constraint2rhs1elementSortvalue
	 ),
	constraint4612constraint2rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabletle
	 ),
	constraint4612constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint3comparisonvar
	 ),
	constraint4612constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint3lhs,
		right <- constraint4612constraint3rhs,
		operation <- #Equal
	 ),
	constraint4612constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4612constraint3lhsleft
	 ),
	constraint4612constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4612constraint3lhsleftleft
	 ),
	constraint4612constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabler
	 ),
	constraint4612constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4612constraint3rhs1}
	 ),
	constraint4612constraint3rhs1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4612constraint3rhs1elementSortvalue
	 ),
	constraint4612constraint3rhs1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabletre
	 ),
	constraint4612constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint4comparisonvar
	 ),
	constraint4612constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint4lhs,
		right <- constraint4612constraint4rhs,
		operation <- #GreaterEqual
	 ),
	constraint4612constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablete
	 ),
	constraint4612constraint4rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabletle
	 ),
	constraint4612constraint5 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint5comparisonvar
	 ),
	constraint4612constraint5comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint5lhs,
		right <- constraint4612constraint5rhs,
		operation <- #GreaterEqual
	 ),
	constraint4612constraint5lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablete
	 ),
	constraint4612constraint5rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabletre
	 ),
	constraint4612constraint6 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4612constraint6comparisonvar
	 ),
	constraint4612constraint6comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4612constraint6lhs,
		right <- constraint4612constraint6rhs,
		operation <- #Equal
	 ),
	constraint4612constraint6lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablet
	 ),
	constraint4612constraint6rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_List',
		features <- OrderedSet{constraint4612constraint6rhs1}
	 ),
	constraint4612constraint6rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint4612constraint6rhs1sortvalue
	 ),
	constraint4612constraint6rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_ListSort',
		features <- OrderedSet{constraint4612constraint6rhs1sortvalue1}
	 ),
	constraint4612constraint6rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'elementSort',
		value <- constraint4612constraint6rhs1sortvalue1elementSortvalue
	 ),
	constraint4612constraint6rhs1sortvalue1elementSortvalue : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablete
	 ),
	constraint4612rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4612rightinitcomp
	 ),
	constraint4612rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4612rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4612rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4612variabler
	 ),
	constraint4612leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4612leftinitcomp
	 ),
	constraint4612leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4612leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4612leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablel
	 ),
	constraint4612operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4612operatorinitcomp
	 ),
	constraint4612operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4612operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4612operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4612variableop
	 ),
	constraint4612expressionvar : CONSTRAINT!"Literal" (
		value <- '46'
	 ),
	constraint4612variablete : CONSTRAINT!"Variable" (
		number <- 218
	 ),
	constraint4612variabletle : CONSTRAINT!"Variable" (
		number <- 219
	 ),
	constraint4612variabletre : CONSTRAINT!"Variable" (
		number <- 220
	 ),
	constraint4612variabler : CONSTRAINT!"Variable" (
		number <- 221
	 ),
	constraint4612variablel : CONSTRAINT!"Variable" (
		number <- 222
	 ),
	constraint4612variableop : CONSTRAINT!"Variable" (
		number <- 223
	 ),
	constraint4612variablet : CONSTRAINT!"Variable" (
		number <- 224
	 ),
	constraint4612typevarequation : CONSTRAINT!"Equation" (
		left <- constraint4612typeexpvarref,
		right <- constraint4612typeexpressionvar
	 ),
	constraint4612typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint4612typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint4612variablet
	 ),
	constraint4713targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint4713varequation,constraint4713typevarequation},
		localconstraints <- OrderedSet{constraint4713rightinit,constraint4713leftinit,constraint4713operatorinit,constraint4713constraint1,constraint4713constraint2,constraint4713constraint3,constraint4713constraint4},
		localvariables <- OrderedSet{constraint4713variablete,constraint4713variabler,constraint4713variablel,constraint4713variableop,constraint4713variablet}
	 ),
	constraint4713varequation : CONSTRAINT!"Equation" (
		left <- constraint4713rulevarref,
		right <- constraint4713expressionvar
	 ),
	constraint4713rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint4713constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4713constraint1comparisonvar
	 ),
	constraint4713constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4713constraint1lhs,
		right <- constraint4713constraint1rhs,
		operation <- #Element
	 ),
	constraint4713constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4713variableop
	 ),
	constraint4713constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint4713constraint1rhs1,constraint4713constraint1rhs2}
	 ),
	constraint4713constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Equal'
	 ),
	constraint4713constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'DisEqual'
	 ),
	constraint4713constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4713constraint2comparisonvar
	 ),
	constraint4713constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4713constraint2lhs,
		right <- constraint4713constraint2rhs,
		operation <- #LessEqual
	 ),
	constraint4713constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4713constraint2lhsleft
	 ),
	constraint4713constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4713constraint2lhsleftleft
	 ),
	constraint4713constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablel
	 ),
	constraint4713constraint2rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablete
	 ),
	constraint4713constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4713constraint3comparisonvar
	 ),
	constraint4713constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4713constraint3lhs,
		right <- constraint4713constraint3rhs,
		operation <- #LessEqual
	 ),
	constraint4713constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4713constraint3lhsleft
	 ),
	constraint4713constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4713constraint3lhsleftleft
	 ),
	constraint4713constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4713variabler
	 ),
	constraint4713constraint3rhs : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablete
	 ),
	constraint4713constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4713constraint4comparisonvar
	 ),
	constraint4713constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4713constraint4lhs,
		right <- constraint4713constraint4rhs,
		operation <- #Equal
	 ),
	constraint4713constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablet
	 ),
	constraint4713constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint4713constraint4rhs1}
	 ),
	constraint4713constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint4713constraint4rhs1sortvalue
	 ),
	constraint4713constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint4713rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4713rightinitcomp
	 ),
	constraint4713rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4713rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4713rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4713variabler
	 ),
	constraint4713leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4713leftinitcomp
	 ),
	constraint4713leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4713leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4713leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablel
	 ),
	constraint4713operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4713operatorinitcomp
	 ),
	constraint4713operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4713operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4713operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4713variableop
	 ),
	constraint4713expressionvar : CONSTRAINT!"Literal" (
		value <- '47'
	 ),
	constraint4713variablete : CONSTRAINT!"Variable" (
		number <- 225
	 ),
	constraint4713variabler : CONSTRAINT!"Variable" (
		number <- 226
	 ),
	constraint4713variablel : CONSTRAINT!"Variable" (
		number <- 227
	 ),
	constraint4713variableop : CONSTRAINT!"Variable" (
		number <- 228
	 ),
	constraint4713variablet : CONSTRAINT!"Variable" (
		number <- 229
	 ),
	constraint4713typevarequation : CONSTRAINT!"Equation" (
		left <- constraint4713typeexpvarref,
		right <- constraint4713typeexpressionvar
	 ),
	constraint4713typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint4713typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint4713variablet
	 ),
	constraint4814targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint4814varequation,constraint4814typevarequation},
		localconstraints <- OrderedSet{constraint4814rightinit,constraint4814leftinit,constraint4814operatorinit,constraint4814constraint1,constraint4814constraint2,constraint4814constraint3,constraint4814constraint4},
		localvariables <- OrderedSet{constraint4814variabler,constraint4814variablel,constraint4814variableop,constraint4814variablet}
	 ),
	constraint4814varequation : CONSTRAINT!"Equation" (
		left <- constraint4814rulevarref,
		right <- constraint4814expressionvar
	 ),
	constraint4814rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint4814constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4814constraint1comparisonvar
	 ),
	constraint4814constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4814constraint1lhs,
		right <- constraint4814constraint1rhs,
		operation <- #Element
	 ),
	constraint4814constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4814variableop
	 ),
	constraint4814constraint1rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint4814constraint1rhs1,constraint4814constraint1rhs2,constraint4814constraint1rhs3}
	 ),
	constraint4814constraint1rhs1 : CONSTRAINT!"Literal" (
		value <- 'Conjunction'
	 ),
	constraint4814constraint1rhs2 : CONSTRAINT!"Literal" (
		value <- 'Disjunction'
	 ),
	constraint4814constraint1rhs3 : CONSTRAINT!"Literal" (
		value <- 'Implication'
	 ),
	constraint4814constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4814constraint2comparisonvar
	 ),
	constraint4814constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4814constraint2lhs,
		right <- constraint4814constraint2rhs,
		operation <- #Equal
	 ),
	constraint4814constraint2lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4814constraint2lhsleft
	 ),
	constraint4814constraint2lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4814constraint2lhsleftleft
	 ),
	constraint4814constraint2lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4814variablel
	 ),
	constraint4814constraint2rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint4814constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4814constraint3comparisonvar
	 ),
	constraint4814constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4814constraint3lhs,
		right <- constraint4814constraint3rhs,
		operation <- #Equal
	 ),
	constraint4814constraint3lhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint4814constraint3lhsleft
	 ),
	constraint4814constraint3lhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint4814constraint3lhsleftleft
	 ),
	constraint4814constraint3lhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint4814variabler
	 ),
	constraint4814constraint3rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint4814constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint4814constraint4comparisonvar
	 ),
	constraint4814constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint4814constraint4lhs,
		right <- constraint4814constraint4rhs,
		operation <- #Equal
	 ),
	constraint4814constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint4814variablet
	 ),
	constraint4814constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_Bool',
		features <- OrderedSet{constraint4814constraint4rhs1}
	 ),
	constraint4814constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint4814constraint4rhs1sortvalue
	 ),
	constraint4814constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_BoolSort',
		features <- OrderedSet{}
	 ),
	constraint4814rightinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4814rightinitcomp
	 ),
	constraint4814rightinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4814rightexpvarref,
		right <- if (not invar.right.oclIsUndefined()) then thisModule.makeObjectNode(invar.right)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4814rightexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4814variabler
	 ),
	constraint4814leftinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4814leftinitcomp
	 ),
	constraint4814leftinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4814leftexpvarref,
		right <- if (not invar.left.oclIsUndefined()) then thisModule.makeObjectNode(invar.left)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4814leftexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4814variablel
	 ),
	constraint4814operatorinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint4814operatorinitcomp
	 ),
	constraint4814operatorinitcomp : CONSTRAINT!"Equation" (
		left <- constraint4814operatorexpvarref,
		right <- if (not invar.operator.oclIsUndefined()) then thisModule.makeLiteral(invar.operator)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint4814operatorexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint4814variableop
	 ),
	constraint4814expressionvar : CONSTRAINT!"Literal" (
		value <- '48'
	 ),
	constraint4814variabler : CONSTRAINT!"Variable" (
		number <- 230
	 ),
	constraint4814variablel : CONSTRAINT!"Variable" (
		number <- 231
	 ),
	constraint4814variableop : CONSTRAINT!"Variable" (
		number <- 232
	 ),
	constraint4814variablet : CONSTRAINT!"Variable" (
		number <- 233
	 ),
	constraint4814typevarequation : CONSTRAINT!"Equation" (
		left <- constraint4814typeexpvarref,
		right <- constraint4814typeexpressionvar
	 ),
	constraint4814typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint4814typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint4814variablet
	 )
do {
 }
 }

rule LambdaRule {
	from invar : TYPEDUCIF!"Lambda" (thisModule.LambdaGuard(invar))
	to Lambdavar : TYPEDUCIF!"Lambda" (
		constraintvar <- invar.constraintvar,
		expression <- invar.expression,
		variable <- invar.variable,
		links <- invar.links
	 ),
	rulevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +0
	 ),
	sortvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +1
	 ),
	atomvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +2
	 ),
	processvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +3
	 ),
	atomsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +4
	 ),
	oldvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +5
	 ),
	newvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +6
	 ),
	actionsvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +7
	 ),
	resultvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +8
	 ),
	typevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +9
	 ),
	variablevariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +10
	 ),
	constructorvariablevar : CONSTRAINT!"Variable" (
		number <- invar.constraintvar.number +11
	 ),
	constraint521targetrule : CONSTRAINT!"EquationConstraint" (
		name <- 'type',
		equation <- OrderedSet{constraint521varequation,constraint521typevarequation},
		localconstraints <- OrderedSet{constraint521variableinit,constraint521expressioninit,constraint521constraint1,constraint521constraint2,constraint521constraint3,constraint521constraint4},
		localvariables <- OrderedSet{constraint521variabled,constraint521variabler,constraint521variablevt,constraint521variablev,constraint521variablee,constraint521variablet}
	 ),
	constraint521varequation : CONSTRAINT!"Equation" (
		left <- constraint521rulevarref,
		right <- constraint521expressionvar
	 ),
	constraint521rulevarref : CONSTRAINT!"VariableReference" (
		var <- rulevariablevar
	 ),
	constraint521constraint1 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint521constraint1comparisonvar
	 ),
	constraint521constraint1comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint521constraint1lhs,
		right <- constraint521constraint1rhs,
		operation <- #Equal
	 ),
	constraint521constraint1lhs : CONSTRAINT!"VariableReference" (
		var <- constraint521variablevt
	 ),
	constraint521constraint1rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint521constraint1rhsleft
	 ),
	constraint521constraint1rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint521constraint1rhsleftleft
	 ),
	constraint521constraint1rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint521variablev
	 ),
	constraint521constraint2 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint521constraint2comparisonvar
	 ),
	constraint521constraint2comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint521constraint2lhs,
		right <- constraint521constraint2rhs,
		operation <- #Equal
	 ),
	constraint521constraint2lhs : CONSTRAINT!"VariableReference" (
		var <- constraint521variabled
	 ),
	constraint521constraint2rhs : CONSTRAINT!"ListNode" (
		values <- OrderedSet{constraint521constraint2rhs1}
	 ),
	constraint521constraint2rhs1 : CONSTRAINT!"VariableReference" (
		var <- constraint521variablevt
	 ),
	constraint521constraint3 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint521constraint3comparisonvar
	 ),
	constraint521constraint3comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint521constraint3lhs,
		right <- constraint521constraint3rhs,
		operation <- #Equal
	 ),
	constraint521constraint3lhs : CONSTRAINT!"VariableReference" (
		var <- constraint521variabler
	 ),
	constraint521constraint3rhs : CONSTRAINT!"IndirectReference" (
		name <- 'sort',
		expression <- constraint521constraint3rhsleft
	 ),
	constraint521constraint3rhsleft : CONSTRAINT!"IndirectReference" (
		name <- 'type',
		expression <- constraint521constraint3rhsleftleft
	 ),
	constraint521constraint3rhsleftleft : CONSTRAINT!"VariableReference" (
		var <- constraint521variablee
	 ),
	constraint521constraint4 : CONSTRAINT!"EquationConstraint" (
		name <- 'comparison',
		equation <- constraint521constraint4comparisonvar
	 ),
	constraint521constraint4comparisonvar : CONSTRAINT!"Equation" (
		left <- constraint521constraint4lhs,
		right <- constraint521constraint4rhs,
		operation <- #Equal
	 ),
	constraint521constraint4lhs : CONSTRAINT!"VariableReference" (
		var <- constraint521variablet
	 ),
	constraint521constraint4rhs : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_HigherOrder',
		features <- OrderedSet{constraint521constraint4rhs1}
	 ),
	constraint521constraint4rhs1 : CONSTRAINT!"Feature" (
		name <- 'sort',
		value <- constraint521constraint4rhs1sortvalue
	 ),
	constraint521constraint4rhs1sortvalue : CONSTRAINT!"ObjectNode" (
		name <- 'mcrl2_HigherOrderSort',
		features <- OrderedSet{constraint521constraint4rhs1sortvalue1,constraint521constraint4rhs1sortvalue2}
	 ),
	constraint521constraint4rhs1sortvalue1 : CONSTRAINT!"Feature" (
		name <- 'domain',
		value <- constraint521constraint4rhs1sortvalue1domainvalue
	 ),
	constraint521constraint4rhs1sortvalue1domainvalue : CONSTRAINT!"VariableReference" (
		var <- constraint521variabled
	 ),
	constraint521constraint4rhs1sortvalue2 : CONSTRAINT!"Feature" (
		name <- 'result',
		value <- constraint521constraint4rhs1sortvalue2resultvalue
	 ),
	constraint521constraint4rhs1sortvalue2resultvalue : CONSTRAINT!"VariableReference" (
		var <- constraint521variabler
	 ),
	constraint521variableinit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint521variableinitcomp
	 ),
	constraint521variableinitcomp : CONSTRAINT!"Equation" (
		left <- constraint521variableexpvarref,
		right <- if (not invar.variable.oclIsUndefined()) then thisModule.makeObjectNode(invar.variable)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint521variableexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint521variablev
	 ),
	constraint521expressioninit : CONSTRAINT!"EquationConstraint" (
		name <- 'init',
		equation <- constraint521expressioninitcomp
	 ),
	constraint521expressioninitcomp : CONSTRAINT!"Equation" (
		left <- constraint521expressionexpvarref,
		right <- if (not invar.expression.oclIsUndefined()) then thisModule.makeObjectNode(invar.expression)else OclUndefined endif,
		operation <- #Equal
	 ),
	constraint521expressionexpvarref : CONSTRAINT!"VariableReference" (
		var <- constraint521variablee
	 ),
	constraint521expressionvar : CONSTRAINT!"Literal" (
		value <- '52'
	 ),
	constraint521variabled : CONSTRAINT!"Variable" (
		number <- 234
	 ),
	constraint521variabler : CONSTRAINT!"Variable" (
		number <- 235
	 ),
	constraint521variablevt : CONSTRAINT!"Variable" (
		number <- 236
	 ),
	constraint521variablev : CONSTRAINT!"Variable" (
		number <- 237
	 ),
	constraint521variablee : CONSTRAINT!"Variable" (
		number <- 238
	 ),
	constraint521variablet : CONSTRAINT!"Variable" (
		number <- 239
	 ),
	constraint521typevarequation : CONSTRAINT!"Equation" (
		left <- constraint521typeexpvarref,
		right <- constraint521typeexpressionvar
	 ),
	constraint521typeexpvarref : CONSTRAINT!"VariableReference" (
		var <- typevariablevar
	 ),
	constraint521typeexpressionvar : CONSTRAINT!"VariableReference" (
		var <- constraint521variablet
	 )
do {
 }
 }
